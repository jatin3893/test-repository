{
	"info": {
		"_postman_id": "211bb03b-82ae-4dc7-ade1-06a7e23aea0a",
		"name": "Postman API",
		"description": "The Postman API lets you to programmatically access data stored in Postman account with ease.\n\n## Getting started\n\nThe easiest way to get started with the Postman API is to [fork this collection](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) to your own workspace. You can then use Postman to send requests.\n\n## Overview\n\n1. You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n2. The API has access rate limits.\n3. The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP `301` redirect to the corresponding HTTPS resources.\n4. The API returns requests responses in [JSON format](https://en.wikipedia.org/wiki/JSON). When an API request returns an error, it is sent in the JSON response as an `\"error\": {}` key.\n5. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.\n6. API calls respond with the appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within the Postman client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates success, while an HTTP `4XX` or HTTP `5XX` response code indicates an error from the requesting client or our API servers, respectively.\n7. Individual resources in your Postman account are accessible using its unique ID (`uid`) value. The `uid` is a simple concatenation of the resource owner's user ID and the resource's ID. For example, a collection's `uid` is `{{owner_id}}-{{collection_id}}` value.\n    \n\n## Authentication\n\nAn API key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header. To get a Postman API key, you can generate one in the [**API keys**](https://postman.postman.co/settings/me/api-keys) section in your Postman account settings.\n\nAn API key tells the API server that the received request from you. Everything that you have access to in Postman is accessible with your API key.\n\nFor ease of use in Postman, you can store your API key as the `postman_api_key` [environment variable](https://www.getpostman.com/docs/environments). The Postman API [collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.\n\n### API Key related error response\n\nIf an API key is missing, malformed, or invalid, you will receive an HTTP `401 Unauthorized` response code and the following JSON response:\n\n``` json\n{\n  \"error\": {\n    \"name\": \"AuthenticationError\",\n    \"message\": \"Invalid API Key. Every request requires a valid API Key to be sent.\"\n  }\n}\n\n```\n\n### Using the API key as a query parameter\n\nEach request that accepts API key as `X-Api-Key` request header also accepts the key when it is sent as the `apikey` query parameter.\n\nAn API key sent as part of the header has a higher priority when you send the key as both a request header and a query parameter.\n\n## Rate Limits\n\nAPI access rate limits apply at a per-API key basis in unit time. Access to the API using an API key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your use:\n\n| Header | Description |\n| --- | --- |\n| `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |\n\nOnce you reach the rate limit you will receive a response similar to the following HTTP `429 Too Many Requests` response:\n\n``` json\n{\n  \"error\": {\n    \"name\": \"rateLimitError\",\n    \"message\": \"Rate Limit exceeded. Please retry at 1465452702843\"\n  }\n}\n\n```\n\nIn the event you receive an HTTP `503` response from our servers, it indicates that we have had an unexpected spike in API access traffic. This is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).\n\n## Support\n\nFor help regarding accessing the Postman API, you can:\n\n* Visit [Postman Support](https://support.postman.com/hc/en-us) or our [Community and Support](https://www.postman.com/community/) sites.\n* Reach out to the [Postman community](https://community.postman.com/).\n* Submit a help request to [Postman support](https://support.postman.com/hc/en-us/requests/new/).\n    \n\n## Policies\n\n* [Postman Terms of Service](http://postman.com/legal/terms/)\n* [Postman Privacy Policy](https://www.postman.com/legal/privacy-policy/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "1138048-211bb03b-82ae-4dc7-ade1-06a7e23aea0a"
	},
	"item": [
		{
			"name": "Collections",
			"item": [
				{
					"name": "Create a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9b2e73b9-82dd-41a3-8c12-5a73d91bb5f2"
							}
						}
					],
					"id": "2f8436c1-fc3d-4189-a4ef-9489a66ffffd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"{{collectionName}}\",\n            \"schema\": \"{{collectionSchemaUrl}}\"\n        },\n        \"item\": [\n            {\n                \"request\": {}\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/collections",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n*   `info` — An **object** that contains the following properties:\n    *   `name` — A **string** value that contains the collection's name.\n    *   `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n*   `item` — An **object** that contains the HTTP request and response information.\n    *   `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n*   For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    *   `info` object — Use the `definitions.info` entry.\n    *   `item` object — Use the `definitions.items` entry.\n*   For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": [
						{
							"id": "01a6725a-bcf7-4428-b393-009b8075988d",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						},
						{
							"id": "b11d5fd9-6f00-4e71-a65d-9eade20022c9",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceFoundError\",\n        \"message\": \"The specified item already exists.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						},
						{
							"id": "bc4580fc-ced9-427a-8226-59dca5bd567f",
							"name": "Malformed Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 1 errors with the supplied collection.\",\n        \"details\": [\n            \": must have required property 'info'\"\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Create a fork",
					"id": "30c69b20-523a-4bcb-a183-21243bd09272",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"label\": \"{{collectionForkName}}\"\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/collections/fork/{{collectionId}}?workspace={{workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"fork",
								"{{collectionId}}"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Required. The workspace ID in which to fork the collection."
								}
							]
						},
						"description": "Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) from an existing collection into a workspace. Include the following required request body properties:\n\n*   `label` — The fork's label."
					},
					"response": [
						{
							"id": "0f18d46b-e7d9-4d8e-8fa6-d4e7774eeb25",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Test Fork\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/fork/12ece9e1-2abf-4edc-8e34-de66e74114d2?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"fork",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Required. The workspace ID in which to fork the collection."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"09547fef-a9a5-4e00-998b-aa563e8db69a\",\n        \"name\": \"Test Collection\",\n        \"fork\": {\n            \"label\": \"Test Fork\",\n            \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n            \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        },\n        \"uid\": \"12345678-09547fef-a9a5-4e00-998b-aa563e8db69a\"\n    }\n}"
						},
						{
							"id": "b5a6ced0-f423-4631-9055-c1c06cd74410",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Test Fork\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/fork/12ece9e1-2abf-4edc-8e34-de66e74114d2?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"fork",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Required. The workspace ID in which to fork the collection."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2cbd6cfe-08c1-4209-9fb4-01acc6400431"
							}
						}
					],
					"id": "84ae4041-a4ea-43bd-bc03-b23a8c673e3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "Gets information about a collection."
					},
					"response": [
						{
							"id": "2a246fdc-7564-4f42-a392-1c81b9b9fa4d",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
						},
						{
							"id": "2726cb6b-775f-4343-b046-0df888d8863e",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0309476d-1518-4dd4-b1fa-7bb9965a8006"
							}
						}
					],
					"id": "ce4d2bdb-9831-4fb2-a4d5-cd4f02f8dd03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "Deletes a collection."
					},
					"response": [
						{
							"id": "49a60671-42e7-4918-b285-b8c01721d3ce",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						},
						{
							"id": "6370136b-2307-498c-b5e4-2de18bd339d2",
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Update a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad458e10-aefc-4c3e-806f-532b3ced2c9f"
							}
						}
					],
					"id": "64d79b83-e4b0-4ef9-9ed7-5e3fd5fa087e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"{{collectionName}}\",\n            \"schema\": \"{{collectionSchemaUrl}}\"\n        },\n        \"item\": [\n            {\n                \"request\": {}\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "Updates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n*   `info` — An **object** that contains the following properties:\n    *   `name` — A **string** value that contains the collection's name.\n    *   `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n*   `item` — An **object** that contains the HTTP request and response information.\n    *   `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n> Use caution when using this endpoint. The system will **replace** the existing collection with the values passed in the request body.\n\n**Note:**\n\n*   For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    *   `info` object — Use the `definitions.info` entry.\n    *   `item` object — Use the `definitions.items` entry.\n*   For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": [
						{
							"id": "f54ab4fe-2288-4e70-9f30-6e86b3d05416",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						},
						{
							"id": "55d943e7-affa-408e-96c9-3d2751f48fa4",
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You do not have enough permissions to perform this action.\"\n    }\n}"
						},
						{
							"id": "e0d67384-5f51-49f6-a2a4-18cce2d3585b",
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						},
						{
							"id": "63120605-aa74-43a0-ae9a-c290226e1e56",
							"name": "Malformed Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 2 errors with the supplied collection.\",\n        \"details\": [\n            \": must have required property 'item'\",\n            \"info: must have required property 'schema'\"\n        ]\n    }\n}"
						},
						{
							"id": "4ff6fa5a-7078-42de-af40-7ded9f8a9db0",
							"name": "Collection ID Mismatch",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"12ece9e1-2abf-4edc-8e34-de66e74114d2"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"collectionMismatchError\",\n        \"message\": \"The collection ID in the path does not match the collection ID in the request body.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Merge a fork",
					"id": "7c460d44-4b53-4e52-aee3-11a7bdb73a85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"strategy\": \"{{mergeStrategy}}\",\n    \"source\": \"{{forkCollectionId}}\",\n    \"destination\": \"{{destinationCollectionId}}\"\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/collections/merge",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"merge"
							]
						},
						"description": "Merges a forked collection back into its destination collection. Include the following required properties in the request body:\n\n*   `source` — The forked collection's ID.\n*   `destination` — The destination collection's ID.\n    \n\nYou can also include the following optional properties in the request body:\n\n*   `strategy` — The fork's merge strategy. One of:\n    *   `deleteSource` — The system **deletes** the forked collection after a successful merge into the destination collection.\n    *   `updateSourceWithDestination` — **Default.** The system only merges the forked collection into the destination collection."
					},
					"response": [
						{
							"id": "c0059fac-f538-4412-89d1-5c4b024dfe74",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"deleteSource\",\n    \"source\": \"12345678-09547fef-a9a5-4e00-998b-aa563e8db69a\",\n    \"destination\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/merge",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"merge"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
						},
						{
							"id": "09eeaf8c-6032-4771-b261-1a696559d50e",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"deleteSource\",\n    \"source\": \"12345678-09547fef-a9a5-4e00-998b-aa563e8db69a\",\n    \"destination\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/merge",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"merge"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get all collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "398ba768-0605-467f-886f-f64e0643f890"
							}
						}
					],
					"id": "fafade41-d150-4fd5-ab90-d5863fbbc9f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID.",
									"disabled": true
								}
							]
						},
						"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
					},
					"response": [
						{
							"id": "d5180531-eb19-48e2-9269-3ace3caeae30",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        },\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-01-13T10:21:46.000Z\",\n            \"updatedAt\": \"2022-02-12T11:29:56.000Z\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"isPublic\": false,\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2021-04-11T09:18:26.000Z\",\n            \"updatedAt\": \"2022-05-01T15:29:32.000Z\",\n            \"uid\": \"12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"isPublic\": true\n        }\n    ]\n}"
						},
						{
							"id": "0fce3450-3d73-4163-95b2-70857ae427dd",
							"name": "Filter by Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "092e1cb3-c9fd-48d8-91cc-04ec6d19c615",
			"description": "The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/)."
		},
		{
			"name": "Environments",
			"item": [
				{
					"name": "Get an environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0fcea16c-7188-408d-b9ea-731cac34a16a"
							}
						}
					],
					"id": "fb791947-0937-4d57-ab53-89cc6f10473c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/environments/{{environmentUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments",
								"{{environmentUid}}"
							]
						},
						"description": "Access the contents of an environment that is accessible to you using its unique id (`uid`).\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "eea59f66-8fb0-4ad4-b1fc-c13481d22d6c",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environment\": {\n        \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test Environment\",\n        \"owner\": \"12345678\",\n        \"createdAt\": \"2020-11-05T13:59:22.000Z\",\n        \"updatedAt\": \"2020-11-05T13:59:23.000Z\",\n        \"values\": [\n            {\n                \"key\": \"apiKey\",\n                \"value\": \"PMAK-1234-5678-0987-6543\",\n                \"enabled\": true,\n                \"type\": \"secret\"\n            }\n        ],\n        \"isPublic\": false\n    }\n}"
						},
						{
							"id": "603e160e-1842-4d50-a1fe-742e8ce3d06e",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the environment you are looking for\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete an environment",
					"id": "188743e0-15b7-4749-80b1-23df6168ef85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/environments/{{environmentUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments",
								"{{environmentUid}}"
							]
						},
						"description": "This endpoint allows you to delete a single environment based on an environment's unique `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "874fe324-aded-48f4-a323-8e1430cb3864",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environment\": {\n        \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "93b54b62-6f12-4fe7-a7cd-a96cdd5ee6f3",
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified environment does not exist.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Create an environment",
					"id": "1f7b1b23-8ff2-4ac3-91e9-9447374d9f3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"environment\": {\n        \"name\": \"{{environmentName}}\",\n        \"values\": [\n            {\n                \"key\": \"{{environmentVariableName}}\",\n                \"value\": \"{{environmentVariableValue}}\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/environments",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the environment.\n\nIf you do not include this query parameter, the system creates the environment in your \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "A sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n              \"type\": \"string\",\n              \"maxLength\": 254,\n              \"minLength\": 1\n            },\n        \"values\": {\n          \"type\": \"array\",\n          \"maxItems\": 100,\n          \"additionalItems\": false,\n          \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"key\": {\n                  \"type\": \"string\",\n                  \"maxLength\": 254\n                  \"minLength\": 1\n                },\n                \"value\": { \"type\": \"string\" },\n                \"enabled\": { \"type\": \"boolean\" }\n              },\n              \"required\": [\"key\", \"value\"]\n            }\n        }\n      },\n      \"required\": [\"name\"]\n    }\n  },\n  \"required\": [\"environment\"]\n}\n```\n\nOn successful creation of the environment, the API returns the environment name and `id`.\n\nYou can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "0247f6d1-f749-4bf1-a675-0fbcd7b25bb4",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Test Environment\",\n        \"values\": [\n            {\n                \"key\": \"variable_1\",\n                \"value\": \"The variable_1 value.\"\n            },\n            {\n                \"key\": \"variable_2\",\n                \"value\": \"The variable_2 value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environment\": {\n        \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test Environment\",\n        \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "581d15f4-1494-4555-aa1a-dfbf7ee6cfd5",
							"name": "Create Environment in a Workspace",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Test Environment\",\n        \"values\": [\n            {\n                \"key\": \"variable_1\",\n                \"value\": \"The variable_1 value.\"\n            },\n            {\n                \"key\": \"variable_2\",\n                \"value\": \"The variable_2 value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environment\": {\n        \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test Environment\",\n        \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "62476f56-540a-4c1d-bafc-d3c50f604647",
							"name": "Malformed Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"values\": [\n            {\n                \"key\": \"variable_1\",\n                \"value\": \"The variable_1 value.\"\n            },\n            {\n                \"key\": \"variable_2\",\n                \"value\": \"The variable_2 value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 1 errors with the supplied environment.\",\n        \"details\": [\n            \"environment: must have required property 'name'\"\n        ]\n    }\n}"
						},
						{
							"id": "6a4ae397-cf98-40b7-9a44-1eb97b5db01e",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Test Environment\",\n        \"values\": [\n            {\n                \"key\": \"variable_1\",\n                \"value\": \"The variable_1 value.\"\n            },\n            {\n                \"key\": \"variable_2\",\n                \"value\": \"The variable_2 value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You are not permitted to perform the action.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update an environment",
					"id": "11ab6788-388d-4ac0-b54a-35a621ab7d78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"environment\": {\n        \"name\": \"{{environmentName}}\",\n        \"values\": [\n            {\n                \"key\": \"{{environmentVariableName}}\",\n                \"value\": \"{{environmentVariableValue}}\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/environments/{{environmentUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments",
								"{{environmentUid}}"
							]
						},
						"description": "This endpoint replaces an existing environment.\n\nA sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"environment\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\"minLength\": 1\n\t\t\t\t},\n\t\t\t\t\"values\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"maxItems\": 100,\n\t\t\t\t\t\"additionalItems\": false,\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"key\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"key\",\n\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"environment\"\n\t]\n}\n```\n\nOn successful updation of the environment, the API returns the environment name and `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "bf4c3e4a-4957-4f68-bc02-dfc5803d5f3f",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Test A Environment\",\n        \"values\": [\n            {\n                \"key\": \"variable_a\",\n                \"value\": \"The variable's value.\"\n            },\n            {\n                \"key\": \"variable_b\",\n                \"value\": \"The variable's value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environment\": {\n        \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test A Environment\",\n        \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "8363baf4-0881-4fe7-af67-ec8a42af4e56",
							"name": "Malformed Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Test A Environment\",\n        \"values\": [\n            null,\n            {\n                \"key\": \"variable_a\",\n                \"value\": \"The variable's value.\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/environments/12345678-5daabc50-8451-43f6-922d-96b403b4f28e",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments",
										"12345678-5daabc50-8451-43f6-922d-96b403b4f28e"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Invalid type: null (expected object) at environment.values.0\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get all environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d71d6882-78db-419e-906a-c9cc7fbbf730"
							}
						}
					],
					"id": "7a0c5d7e-9b19-49b2-8079-3f0906b329e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/environments",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID.",
									"disabled": true
								}
							]
						},
						"description": "The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..\n\nThe response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "cf9a4f0a-9f99-44a6-b14a-754df013e3b0",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environments\": [\n       {\n            \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"name\": \"Test Environment\",\n            \"createdAt\": \"2020-09-23T14:31:18.000Z\",\n            \"updatedAt\": \"2020-12-04T14:13:40.000Z\",\n            \"owner\": \"12345678\",\n            \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"isPublic\": false\n        },\n        {\n            \"id\": \"7d786cc8-142b-4d62-b5a5-872afc37ad16\",\n            \"name\": \"Environment Scanner\",\n            \"createdAt\": \"2020-02-04T19:34:23.000Z\",\n            \"updatedAt\": \"2020-08-12T13:34:06.000Z\",\n            \"owner\": \"12345678\",\n            \"uid\": \"12345678-7d786cc8-142b-4d62-b5a5-872afc37ad16\",\n            \"isPublic\": false\n        }\n    ]\n}"
						},
						{
							"id": "4469b25b-0639-4478-b78f-e32d7611bb38",
							"name": "Filter by Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/environments?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"environments\": [\n       {\n            \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"name\": \"Test Environment\",\n            \"createdAt\": \"2020-09-23T14:31:18.000Z\",\n            \"updatedAt\": \"2020-12-04T14:13:40.000Z\",\n            \"owner\": \"12345678\",\n            \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"isPublic\": false\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "549557cc-392a-41b6-a3f6-4cde920b8576",
			"description": "The `/environments` endpoints let you manage your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/)."
		},
		{
			"name": "Mocks",
			"item": [
				{
					"name": "Update a server stub",
					"id": "28d0f617-bf68-41a5-b35f-d669ca18942b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serverResponse\": {\n        \"name\": \"{{serverStubName}}\",\n        \"statusCode\": \"{{statusCode}}\",\n        \"headers\": [\n            {\n                \"key\": \"{{headerKey}}\",\n                \"value\": \"{{headerValue}}\"\n            }\n        ],\n        \"body\": \"{{serverStubBody}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/server-responses/{{serverResponseId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"server-responses",
								"{{serverResponseId}}"
							]
						},
						"description": "Updates a mock server's server stub. Include at least one of the following properties in the request body:\n\n*   `name` — A **string** that contains the server response's name.\n*   `statusCode` — A **string** that contains the server stub's response code. This property only accepts [5xx values](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n*   `headers` — An **array of objects** that contains the server stub's headers:\n    *   `key` — A **string** that contains the header's key.\n    *   `value` — A **string** that contains the header key's value. This value defines the corresponding value for the header key.\n*   `body` — A **string** that contains a response body that returns when you call the mock server."
					},
					"response": [
						{
							"id": "f8f630fc-85ac-4987-a754-82e0ae065afd",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serverResponse\": {\n        \"name\": \"Service Unavailable\",\n        \"statusCode\": 503,\n        \"headers\": [\n            {\n                \"key\": \"Content-type\",\n                \"value\": \"application/json\"\n            }\n        ],\n        \"language\": \"json\",\n        \"body\": \"{\\n    \\\"message\\\": \\\"Service is temporarily unavailable due to maintenance. Please reach out to support if the problem persists.\\\"\\n}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2022-08-02T15:08:03.000Z\",\n    \"updatedAt\": \"2022-08-02T15:58:12.000Z\",\n    \"id\": \"965cdd16-fe22-4d96-a161-3d05490ac421\",\n    \"name\": \"Service Unavailable\",\n    \"statusCode\": 503,\n    \"headers\": [\n        {\n            \"key\": \"Content-type\",\n            \"value\": \"application/json\"\n        }\n    ],\n    \"language\": \"json\",\n    \"body\": \"{\\n    \\\"message\\\": \\\"Service is temporarily unavailable due to maintenance. Please reach out to support if the problem persists.\\\"\\n}\",\n    \"createdBy\": \"12345678\",\n    \"updatedBy\": \"12345678\",\n    \"mock\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n}"
						},
						{
							"id": "a3082686-201f-45ef-be2b-9e1168d99b99",
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serverResponse\": {\n\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"Parameter is missing in the request.\",\n        \"details\": {\n            \"param\": \"serverResponse\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get a mock server",
					"id": "f49ba8e7-a01e-4ead-9482-6d6cccd87da5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}"
							]
						},
						"description": "Gets information about a mock server."
					},
					"response": [
						{
							"id": "3622c96b-bfbd-423b-a256-67f9609dcbd6",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"owner\": \"12345678\",\n        \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n        \"name\": \"Test Mock\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true,\n            \"delay\": {\n                \"type\": \"fixed\",\n                \"duration\": 140000\n            },\n            \"serverResponseId\": null\n        },\n        \"createdAt\": \"2022-07-25T20:54:30.000Z\",\n        \"updatedAt\": \"2022-07-25T20:54:30.000Z\",\n        \"isPublic\": false,\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "fe6d6753-b983-497e-afba-6426eb2cae4c",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified mock does not exist.\",\n        \"details\": {}\n    }\n}"
						}
					]
				},
				{
					"name": "Get a server stub",
					"id": "91847ef9-ff56-4392-ad43-468faeeb53c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/server-responses/{{serverResponseId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"server-responses",
								"{{serverResponseId}}"
							]
						},
						"description": "Gets information about a mock server's server stub."
					},
					"response": [
						{
							"id": "3e72b2ff-81b2-40e5-bfee-9c2fd9c89605",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2022-08-02T15:08:03.000Z\",\n    \"updatedAt\": \"2022-08-02T15:08:03.000Z\",\n    \"id\": \"965cdd16-fe22-4d96-a161-3d05490ac421\",\n    \"name\": \"Internal Server Error\",\n    \"statusCode\": 500,\n    \"headers\": [],\n    \"language\": null,\n    \"body\": \"{\\n    \\\"message\\\": \\\"Something went wrong; try again later.\\\"\\n}\",\n    \"createdBy\": \"20891195\",\n    \"updatedBy\": \"20891195\",\n    \"mock\": \"32cd624d-9986-4f20-9048-89252f722269\"\n}"
						},
						{
							"id": "20de1f49-55fe-425f-804d-f2efdd739343",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"serverResponseNotFoundError\",\n        \"message\": \"We could not find the mock server response you are looking for.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Create a mock server",
					"id": "ef2e7679-8af3-400c-9757-4ac1568dfc27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mock\": {\n\t\t\"collection\": \"{{collectionId}}\",\n\t\t\"environment\": \"{{environmentId}}\",\n        \"name\": \"{{mockName}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/mocks?workspace={{workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the mock server.\n\nIf you do not include this query parameter, the system creates the mock server in your \"My Workspace\" workspace."
								}
							]
						},
						"description": "Creates a mock server in a collection. Include a `mock` object in the request body that contains following properties:\n\n*   `collection` — A **string** that contians the collection ID.\n    \n\nYou can include the following optional properties in the request body:\n\n*   `environment` — A **string** that contains the environment ID to associate with the mock server.\n*   `name` — A **string** that contains the the mock server's name."
					},
					"response": [
						{
							"id": "e0592bd2-348a-479b-855a-14272a8f2c83",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mock\": {\n\t\t\"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n\t\t\"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test Mock\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the mock server."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "The mime type of this content",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"owner\": \"12345678\",\n        \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n        \"name\": \"Test Mock\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true,\n            \"delay\": null,\n            \"serverResponseId\": null\n        },\n        \"createdAt\": \"2022-06-09T19:00:39.000Z\",\n        \"updatedAt\": \"2022-06-09T19:00:39.000Z\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "cea5bbd9-7332-48b5-8103-774d62ef1342",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mock\": {\n\t\t\"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"name\": \"Test Mock\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the mock server.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "The mime type of this content",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"Parameter is missing in the request.\",\n        \"details\": {\n            \"param\": [\n                \"collection\"\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get all mock servers",
					"id": "48f871e2-ee00-4f04-a149-e06cd5adea3e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks"
							]
						},
						"description": "Gets all mock servers."
					},
					"response": [
						{
							"id": "09a1a7c3-db58-4b88-8252-c672681c3a6c",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mocks\": [\n        {\n            \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n            \"owner\": \"12345678\",\n            \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n            \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n            \"name\": \"Test Mock\",\n            \"config\": {\n                \"headers\": [],\n                \"matchBody\": false,\n                \"matchQueryParams\": true,\n                \"matchWildcards\": true,\n                \"delay\": {\n                    \"type\": \"fixed\",\n                    \"duration\": 140000\n                },\n                \"serverResponseId\": null\n            },\n            \"createdAt\": \"2022-07-25T20:54:30.000Z\",\n            \"updatedAt\": \"2022-07-25T20:54:30.000Z\",\n            \"isPublic\": false,\n            \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Delete a mock server",
					"id": "5abdae41-21e7-4f7e-bd01-946c6d67dc9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}"
							]
						},
						"description": "Deletes a mock server."
					},
					"response": [
						{
							"id": "d4d150b9-f639-4c00-ad8d-8d9782d8f400",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"0fca2246-c108-41f5-8454-cc032def329f\",\n        \"uid\": \"1679925-0fca2246-c108-41f5-8454-cc032def329f\"\n    }\n}"
						},
						{
							"id": "362ac7fb-01de-4a78-a584-324a28256598",
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified mock does not exist.\",\n        \"details\": {}\n    }\n}"
						}
					]
				},
				{
					"name": "Unpublish a mock server",
					"id": "3e9a5326-640c-4216-904d-e711078d48ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/unpublish",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"unpublish"
							]
						},
						"description": "Unpublishes a mock server. Unpublishing a mock server sets its **Access Control** configuration setting to private."
					},
					"response": [
						{
							"id": "9c5c03b8-f4d5-4434-a284-b15c729d5779",
							"name": "Success Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/unpublish",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"unpublish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n    }\n}"
						},
						{
							"id": "d89afae5-3ef7-4405-864d-897f39a43527",
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/unpublish",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"unpublish"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockAlreadyUnpublishedError\",\n        \"message\": \"This mock has already been deleted.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get all server stubs",
					"id": "a4eff657-cf85-4b46-8ce2-0f2bedc5a3d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/server-responses",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"server-responses"
							]
						},
						"description": "Gets all of a mock server's server stubs."
					},
					"response": [
						{
							"id": "0387732e-a1ae-4ab0-8a38-8c6e3d83d9f2",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"965cdd16-fe22-4d96-a161-3d05490ac421\",\n        \"name\": \"Internal Server Error\",\n        \"statusCode\": 500,\n        \"createdAt\": \"2022-08-02T14:57:44.000Z\",\n        \"updatedAt\": \"2022-08-02T14:57:44.000Z\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\"\n    }\n]"
						},
						{
							"id": "16daea02-6e8c-499f-8667-425206a840d9",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified mock does not exist.\",\n        \"details\": {}\n    }\n}"
						}
					]
				},
				{
					"name": "Create a server stub",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d91bbe55-35a5-4dcd-9a03-6c351cbad608"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c01da4e4-e3db-448f-80d1-5cf110a374fb"
							}
						}
					],
					"id": "7643ef27-fa60-46b1-9846-ee1b4c25c8c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serverResponse\": {\n        \"name\": \"{{serverStubName}}\",\n        \"statusCode\": \"{{statusCode}}\",\n        \"headers\": [\n            {\n                \"key\": \"{{headerKey}}\",\n                \"value\": \"{{headerValue}}\"\n            }\n        ],\n        \"body\": \"{{serverStubBody}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/server-responses",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"server-responses"
							]
						},
						"description": "Creates a server response stub. Server response stubs let you simulate 5xx server level responses, such as 500 or 503.\n\nServer level responses, such as 500 or 503, are agnostic to application-level logic. Server stubs let you simulate this behavior on a mock server. You do not need to define each error for all exposed paths on the mock server.\n\nIf you set a server stubs as active, then all the calls to the mock server return with that active server stub's response.\n\n> You can create multiple server responses for a mock server, but only one mock server can be set as active.\n\nYou must include the following properties in the request body:\n\n*   `name` — A **string** that contains the server response's name.\n*   `statusCode` — An **integer** that contains the server stub's 5xx response code. This property **only** accepts [5xx values](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\n    \n\nYou can also include the following optional properties:\n\n*   `headers` — An **array of objects** that contains the server stub's headers:\n    *   `key` — A **string** that contains the header's key.\n    *   `value` — A **string** that contains the header key's value. This value defines the corresponding value for the header key.\n*   `body` — A **string** that contains a response body that returns when you call the mock server."
					},
					"response": [
						{
							"id": "571d5355-7822-440d-bb47-67bd14c7862e",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serverResponse\": {\n        \"name\": \"Internal Server Error\",\n        \"statusCode\": 500,\n        \"header\": [\n            {\n                \"key\": \"Content-Type\",\n                \"value\": \"application/json\"\n            }\n        ],\n        \"body\": \"{\\n    \\\"message\\\": \\\"Something went wrong; try again later.\\\"\\n}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2022-08-02T15:08:03.000Z\",\n    \"updatedAt\": \"2022-08-02T15:08:03.000Z\",\n    \"id\": \"965cdd16-fe22-4d96-a161-3d05490ac421\",\n    \"name\": \"Internal Server Error\",\n    \"statusCode\": 500,\n    \"headers\": [],\n    \"language\": null,\n    \"body\": \"{\\n    \\\"message\\\": \\\"Something went wrong; try again later.\\\"\\n}\",\n    \"createdBy\": \"20891195\",\n    \"updatedBy\": \"20891195\",\n    \"mock\": \"32cd624d-9986-4f20-9048-89252f722269\"\n}"
						},
						{
							"id": "07de6147-6344-4b08-b59d-09d9c7ebeb79",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serverResponse\": {\n        \"name\": \"Internal Server Error\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"Parameter is missing in the request.\",\n        \"details\": {\n            \"param\": [\n                \"statusCode\"\n            ]\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Delete a server stub",
					"id": "ad4ad0e3-80ce-4db8-9b1b-28baba56027c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/server-responses/{{serverResponseId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"server-responses",
								"{{serverResponseId}}"
							]
						},
						"description": "Deletes a mock server's sever response stub."
					},
					"response": [
						{
							"id": "2381f97e-f743-483c-bc13-d3cdc261c48d",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"bf6bbf95-bebb-44ba-8edb-1f096f905774\",\n    \"name\": \"Service Unavailable\",\n    \"statusCode\": 503,\n    \"headers\": [\n        {\n            \"key\": \"Content-Type\",\n            \"value\": \"application/json\"\n        }\n    ],\n    \"language\": \"json\",\n    \"body\": \"{\\n    \\\"message\\\": \\\"Service is temporarily unavailable due to maintenance. If the problem persists, reach out to support.\\\"\\n}\",\n    \"createdBy\": \"1\",\n    \"updatedBy\": \"1\",\n    \"createdAt\": \"2022-05-02T09:38:04.000Z\"\n}"
						},
						{
							"id": "19f3a057-7490-4efd-a0d9-a566313e3b7b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/server-responses/965cdd16-fe22-4d96-a161-3d05490ac421",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"server-responses",
										"965cdd16-fe22-4d96-a161-3d05490ac421"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"serverResponseNotFoundError\",\n        \"message\": \"We could not find the mock server response you are looking for.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Publish a mock server",
					"id": "d7e5c8f9-a0e4-4919-9c9a-cb8a92b74a6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/publish",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"publish"
							]
						},
						"description": "Publishes a mock server. Publishing a mock server sets its **Access Control** configuration setting to public."
					},
					"response": [
						{
							"id": "2937c93d-253e-49d3-9b44-f49c5386f894",
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/publish",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"publish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n    }\n}"
						},
						{
							"id": "2cbae052-83ae-45b4-a89e-47e135047ae1",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/publish",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"publish"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockAlreadyPublishedError\",\n        \"message\": \"This mock is already public.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update a mock server",
					"id": "92428a3d-cb86-4f0f-a955-63cd734cb4fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mock\": {\n        \"name\": \"{{mockName}}\",\n        \"environment\": \"{{environmentUid}}\",\n        \"private\": \"<boolean>\",\n        \"versionTag\": \"{{apiVersionTagId}}\",\n        \"config\": {\n          \"serverResponseId\": \"{{serverResponseId}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}"
							]
						},
						"description": "Updates a mock server. Include the `mock` object in the request body with one or more of the following properties:\n\n*   `name` — A **string** that contains the mock server's name.\n*   `environment` — A **string** that contains the environment UID.\n*   `private` — A **boolean** value that, if true, sets the mock server as private.\n*   `versionTag` — A **string** that contains the API's version tag ID.\n*   `config` — An **object** that contains the following properties:\n    *   `serverResponseId` — A **string** that contains the server response ID. This sets the given server response as the default response for each request."
					},
					"response": [
						{
							"id": "8af43342-87ad-49d9-abfc-138f4ea8850d",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mock\": {\n        \"name\": \"Test Mock\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"description\": \"This is a test mock server.\",\n        \"private\": false,\n        \"versionTag\": \"abf07d3d-f8ec-47d4-8015-9fe83078b4ec\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"owner\": \"12345678\",\n        \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n        \"name\": \"Test Mock\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true\n        },\n        \"createdAt\": \"2022-06-09T19:38:06.000Z\",\n        \"updatedAt\": \"2022-06-13T18:55:25.000Z\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "0442fb0b-6c4d-4dcd-988f-67079b15b01f",
							"name": "Activate a Server Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mock\": {\n        \"config\": {\n          \"serverResponseId\": \"9a291bbe-dc0a-44ba-a3c8-6dbd06a61460\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"owner\": \"12345678\",\n        \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n        \"name\": \"Test Mock\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true,\n            \"delay\": null,\n            \"serverResponseId\": \"9a291bbe-dc0a-44ba-a3c8-6dbd06a61460\"\n        },\n        \"createdAt\": \"2022-06-09T19:38:06.000Z\",\n        \"updatedAt\": \"2022-06-13T18:55:25.000Z\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						},
						{
							"id": "d643600a-e82b-481f-9d67-8b24cdef8522",
							"name": "Deactivate a Server Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mock\": {\n        \"config\": {\n          \"serverResponseId\": null\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n    \"mock\": {\n        \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"owner\": \"12345678\",\n        \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"mockUrl\": \"https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io\",\n        \"name\": \"Test Mock\",\n        \"config\": {\n            \"headers\": [],\n            \"matchBody\": false,\n            \"matchQueryParams\": true,\n            \"matchWildcards\": true,\n            \"delay\": null,\n            \"serverResponseId\": null\n        },\n        \"createdAt\": \"2022-06-09T19:38:06.000Z\",\n        \"updatedAt\": \"2022-06-13T18:55:25.000Z\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get a mock server's call logs",
					"id": "5a56302e-e439-4153-9a1f-7e080cc1054e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{mockUid}}/call-logs",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{mockUid}}",
								"call-logs"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}",
									"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "{{cursor}}",
									"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
									"disabled": true
								},
								{
									"key": "until",
									"value": "{{until}}",
									"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
									"disabled": true
								},
								{
									"key": "since",
									"value": "{{since}}",
									"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
									"disabled": true
								},
								{
									"key": "responseStatusCode",
									"value": "{{responseStatusCode}}",
									"description": "Optional. Return only the call logs that match the given HTTP response status code.",
									"disabled": true
								},
								{
									"key": "responseType",
									"value": "{{responseType}}",
									"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "requestMethod",
									"value": "{{requestMethod}}",
									"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "requestPath",
									"value": "{{requestPath}}",
									"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "{{sort}}",
									"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "{{direction}}",
									"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
									"disabled": true
								},
								{
									"key": "include",
									"value": "{{include}}",
									"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
									"disabled": true
								}
							]
						},
						"description": "Gets a mock server's call logs. You can get a maximum of 6.5MB of call logs **or** a total of 100 call logs, whichever limit is met first in one API call.\n\nCall logs contain exchanged request and response data made to mock servers. The logs provide visibility into how the mock servers are being used. You can log data to debug, test, analyze, and more, depending upon the use case."
					},
					"response": [
						{
							"id": "ef99890d-ebd9-41c7-b2a1-11ea2127bb0c",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "2abe25b4-623e-4872-b954-8e7b2ca724ae",
							"name": "Filter by Limit",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?limit=2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100."
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"call-logs\": [\n        {\n            \"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n            \"responseName\": \"Double check your method and the request path and try again.\",\n            \"servedAt\": \"2022-01-17T06:19:30.000Z\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"path\": \"/animals\"\n            },\n            \"response\": {\n                \"type\": \"error\",\n                \"statusCode\": 404\n            }\n        },\n        {\n            \"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n            \"responseName\": \"Bad request\",\n            \"servedAt\": \"2022-01-17T06:19:22.000Z\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"path\": \"/animals\"\n            },\n            \"response\": {\n                \"type\": \"success\",\n                \"statusCode\": 400\n            }\n        }\n    ],\n    \"meta\": {\n        \"nextCursor\": \"eyJzY2hlbWUiOiJjdXJzb3JfcGFnaW5hdGlvbklkIiwiZGlyZWN0aW9uVHlwZSI6Im5leHQiLCJwaXZvdCI6InBhZ2luYXRpb25JZCIsInZhbHVlIjoxNjQyNDAwMzU2MDAwNTc5fQ==\"\n    }\n}"
						},
						{
							"id": "f7a26566-3ae4-42d5-bd71-3a5e8328d331",
							"name": "Filter by Cursor",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?cursor=eyJzY2hlbWUiOiJjdXJzb3JfcGFnaW5hdGlvbklkIiwiZGlyZWN0aW9uVHlwZSI6Im5leHQiLCJwaXZvdCI6InBhZ2luYXRpb25JZCIsInZhbHVlIjoxNjQyNDAwMzU2MDAwNTc5fQ==",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "eyJzY2hlbWUiOiJjdXJzb3JfcGFnaW5hdGlvbklkIiwiZGlyZWN0aW9uVHlwZSI6Im5leHQiLCJwaXZvdCI6InBhZ2luYXRpb25JZCIsInZhbHVlIjoxNjQyNDAwMzU2MDAwNTc5fQ==",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter."
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "4820f055-3a78-4446-9073-cfa6846c1846",
							"name": "Filter by a Date Range",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?until=2022-01-20T06:19:22.000Z&since=2022-01-17T06:19:22.000Z",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "2022-01-20T06:19:22.000Z",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format."
										},
										{
											"key": "since",
											"value": "2022-01-17T06:19:22.000Z",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format."
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "a5e49f1c-777c-416c-b12e-2b65037da52b",
							"name": "Filter by Date Since",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?since=2022-01-17T06:19:16.000Z",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "2022-01-17T06:19:16.000Z",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format."
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "f16af877-5bb6-434d-9bc8-02fe55ee7c6a",
							"name": "Filter by responseStatusCode",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?responseStatusCode=200",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "200",
											"description": "Optional. Return only the call logs that match the given HTTP response status code."
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "9eb3014f-7496-4209-af70-8fbb86d7325f",
							"name": "Filter by responseType",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?responseType=success",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "success",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive."
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "1783910b-efdb-45e1-a678-4cc98e8c9542",
							"name": "Filter by requestMethod",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?requestMethod=post",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "post",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive."
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "e085b604-8e46-4920-88ec-b024a617e645",
							"name": "Filter by requestPath",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?requestPath=/animals?type=Dog",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "/animals?type=Dog",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive."
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "e49df81d-abd3-4f1f-b8cd-e649336fc935",
							"name": "Sort by servedAt",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?sort=servedAt&direction=asc",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "servedAt",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter."
										},
										{
											"key": "direction",
											"value": "asc",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter."
										},
										{
											"key": "include",
											"value": "{{include}}",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\"\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						},
						{
							"id": "edc3ff4f-7a11-45c8-a63e-9a12f39dec81",
							"name": "Filter by Header and Body Data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/mocks/12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289/call-logs?include=request.headers,request.body,response.headers,response.body",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks",
										"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289",
										"call-logs"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"description": "Optional. The maximum number of rows to return in the response. This value defaults to 100.",
											"disabled": true
										},
										{
											"key": "cursor",
											"value": "{{cursor}}",
											"description": "Optional. A pointer to the first record of the set of paginated results. To view the next response, use the \"nextCursor\" value for this parameter.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only the call logs created at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only the call logs created at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "responseStatusCode",
											"value": "{{responseStatusCode}}",
											"description": "Optional. Return only the call logs that match the given HTTP response status code.",
											"disabled": true
										},
										{
											"key": "responseType",
											"value": "{{responseType}}",
											"description": "Optional. Return only the call logs with a matching response type. For example, \"success\" or \"error\". Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestMethod",
											"value": "{{requestMethod}}",
											"description": "Optional. Return only the call logs with a matching HTTP method. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "requestPath",
											"value": "{{requestPath}}",
											"description": "Optional. Return only the call logs that match the request's path. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the call logs by the given property. This only accepts the \"servedAt\" value.\n\nIf you use this query parameter, you must also use the \"direction\" parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (asc) or descending (desc) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										},
										{
											"key": "include",
											"value": "request.headers,request.body,response.headers,response.body",
											"description": "Optional. Include call log records with header and body data. This query parameter accepts the \"request.headers\", \"request.body\", \"response.headers\", and \"response.body\" values. For multiple include types, comma-separate each value."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 19:10:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=7b522a87c70459d8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=08e5bf465e218638"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n\t\"call-logs\": [\n\t\t{\n\t\t\t\"id\": \"c4505a1e-7261-497c-91ff-db4bd51351a6-9545\",\n\t\t\t\"responseName\": \"Double check your method and the request path and try again.\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:30.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\",\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-length\",\n\t\t\t\t\t\t\"value\": \"50\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"x-mock-match-request-body\",\n\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"data\": \"{\\\"type\\\":\\\"hamster\\\",\\\"breed\\\":\\\"Syrian Hamster\\\"}\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"error\",\n\t\t\t\t\"statusCode\": 404,\n\t\t\t\t\"headers\": [],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"data\": \"{\\\"error\\\":{\\\"name\\\":\\\"mockRequestNotFoundError\\\",\\\"message\\\":\\\"Double check your method and the request path and try again.\\\"}}\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"0f63f54d-665e-436a-95b4-c1302d7685a9-3925\",\n\t\t\t\"responseName\": \"Bad request\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:22.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\",\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-length\",\n\t\t\t\t\t\t\"value\": \"69\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"x-mock-match-request-body\",\n\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"data\": \"{\\\"type\\\":\\\"hamster\\\",\\\"breed\\\":\\\"Syrian Hamster\\\",\\\"age\\\":\\\"1 month\\\"}\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 400,\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\t\"content\": \"\",\n\t\t\t\t\t\t\t\"type\": \"text/plain\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"data\": \"{\\n\\t\\\"message\\\": \\\"Malformed request. You need to send gender as part of the request.\\\"\\n}\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"adab0d30-5c38-43bf-af90-4119925138e2-3795\",\n\t\t\t\"responseName\": \"Successful addition of animals to the store\",\n\t\t\t\"servedAt\": \"2022-01-17T06:19:16.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"path\": \"/animals\",\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-length\",\n\t\t\t\t\t\t\"value\": \"88\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"x-mock-match-request-body\",\n\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"content-type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"data\": \"{\\\"type\\\":\\\"hamster\\\",\\\"breed\\\":\\\"Syrian Hamster\\\",\\\"age\\\":\\\"1 month\\\",\\\"gender\\\":\\\"male\\\"}\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200,\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\t\"content\": \"\",\n\t\t\t\t\t\t\t\"type\": \"text/plain\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"data\": \"{\\n\\t\\\"message\\\": \\\"Animal added successfully to the store\\\"\\n}\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468\",\n\t\t\t\"responseName\": \"Get filtered list of Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:26.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals?type=dog\",\n\t\t\t\t\"headers\": [],\n\t\t\t\t\"body\": {}\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200,\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\t\"content\": \"\",\n\t\t\t\t\t\t\t\"type\": \"text/plain\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"data\": \"[\\n\\t{\\n\\t\\t\\\"type\\\": \\\"dog\\\",\\n\\t\\t\\\"breed\\\": \\\"German Sheperd\\\",\\n\\t\\t\\\"age\\\": \\\"6 months\\\",\\n\\t\\t\\\"gender\\\": \\\"male\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"type\\\": \\\"dog\\\",\\n\\t\\t\\\"breed\\\": \\\"Bulldog\\\",\\n\\t\\t\\\"age\\\": \\\"1 year\\\",\\n\\t\\t\\\"gender\\\": \\\"female\\\"\\n\\t}\\n]\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"a5330463-26e1-4812-a962-e44b569a2054-9894\",\n\t\t\t\"responseName\": \"Get Animals\",\n\t\t\t\"servedAt\": \"2022-01-17T06:18:06.000Z\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"path\": \"/animals\",\n\t\t\t\t\"headers\": [],\n\t\t\t\t\"body\": {}\n\t\t\t},\n\t\t\t\"response\": {\n\t\t\t\t\"type\": \"success\",\n\t\t\t\t\"statusCode\": 200,\n\t\t\t\t\"headers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\t\"content\": \"\",\n\t\t\t\t\t\t\t\"type\": \"text/plain\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"data\": \"[\\n\\t{\\n\\t\\t\\\"type\\\": \\\"dog\\\",\\n\\t\\t\\\"breed\\\": \\\"German Sheperd\\\",\\n\\t\\t\\\"age\\\": \\\"6 months\\\",\\n\\t\\t\\\"gender\\\": \\\"male\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"type\\\": \\\"dog\\\",\\n\\t\\t\\\"breed\\\": \\\"Bulldog\\\",\\n\\t\\t\\\"age\\\": \\\"1 year\\\",\\n\\t\\t\\\"gender\\\": \\\"female\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"type\\\": \\\"cat\\\",\\n\\t\\t\\\"breed\\\": \\\"Persian cat\\\",\\n\\t\\t\\\"age\\\": \\\"3 months\\\",\\n\\t\\t\\\"gender\\\": \\\"female\\\"\\n\\t}\\n]\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"nextCursor\": null\n\t}\n}"
						}
					]
				}
			],
			"id": "2a2dcdb0-d06b-4593-9a78-8bc083bd7b3b",
			"description": "The `/mocks` endpoints lets you manage your [mock servers](https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/)."
		},
		{
			"name": "Monitors",
			"item": [
				{
					"name": "Create a monitor",
					"id": "840867b2-dd7d-401a-bd4e-9291678c0587",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"monitor\": {\n    \"name\": \"{{monitorName}}\",\n    \"schedule\": {\n      \"cron\": \"{{cronFrequencyPattern}}\",\n      \"timezone\": \"{{monitorTimezone}}\"\n    },\n    \"collection\": \"{{collectionUid}}\",\n    \"environment\": \"{{environmentUid}}\"\n  }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/monitors",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. The workspace ID.",
									"disabled": true
								}
							]
						},
						"description": "This endpoint allows you to create a monitor.\n\nSome sample `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\nYou can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "582d459a-acb3-4801-94bf-abc7dd82bae7",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"name\": \"Test Monitor\",\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"America/Chicago\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
									"key": "postman.sid"
								}
							],
							"body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"name\": \"Test Monitor\",\n        \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n    }\n}"
						},
						{
							"id": "7a2e6692-99a3-4834-ac23-d7715f891653",
							"name": "Create Monitor in a Workspace",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"name\": \"Test Monitor\",\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"America/Chicago\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"name\": \"Test Monitor\",\n        \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n    }\n}"
						},
						{
							"id": "f9fc47aa-da1c-4181-82b4-56c0ff8f93de",
							"name": "Invalid Cron Pattern",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"Test Monitor\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"* * * * *\",\n\t\t\t\"timezone\": \"America/Chicago\"\n\t\t},\n\t\t\"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n\t\t\"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"cronPatternNotAllowedError\",\n        \"message\": \"The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.\",\n        \"details\": {\n            \"pattern\": \"* * * * *\"\n        }\n    }\n}"
						},
						{
							"id": "46aac358-097f-48fc-82ae-0936f77b07d8",
							"name": "Invalid Collection UID",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"Test Monitor\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"0 0 * * *\",\n\t\t\t\"timezone\": \"America/Chicago\"\n\t\t},\n\t\t\"collection\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n\t\t\"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidUidError\",\n        \"message\": \"The specified uid is invalid.\",\n        \"details\": {\n            \"param\": \"collection\",\n            \"uid\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
						},
						{
							"id": "537a9d92-38a3-47fa-bdfc-de0174427335",
							"name": "Invalid Environment UID",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"name\": \"Test Monitor\",\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"America/Chicago\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidUidError\",\n        \"message\": \"The specified uid is invalid.\",\n        \"details\": {\n            \"param\": \"environment\",\n            \"uid\": \"5daabc50-8451-43f6-922d-96b403b4f28e\"\n        }\n    }\n}"
						},
						{
							"id": "c7f1d645-0114-4460-aad1-ece614764cd5",
							"name": "Invalid Timezone",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"name\": \"Test Monitor\",\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"USA\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The request had invalid parameters\",\n        \"details\": {\n            \"param\": \"schedule.timezone\"\n        }\n    }\n}"
						},
						{
							"id": "d2932064-8a73-4fdc-b3d9-8335da8087d2",
							"name": "Missing Parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"America/Chicago\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"Parameter is missing in the request.\",\n        \"details\": {\n            \"param\": [\n                \"name\"\n            ]\n        }\n    }\n}"
						},
						{
							"id": "8629b73e-0178-401f-bc2f-354a672dc140",
							"name": "Forbidden Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"monitor\": {\n        \"name\": \"Test Monitor\",\n        \"schedule\": {\n            \"cron\": \"0 0 * * *\",\n            \"timezone\": \"America/Chicago\"\n        },\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environment\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You need read access to this collection in order to perform this action.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Run a monitor",
					"id": "ced8e056-b229-49ea-a759-e9e51c2f96c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/monitors/{{monitorUid}}/run",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors",
								"{{monitorUid}}",
								"run"
							]
						},
						"description": "This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "76eeaa3a-94df-4144-9f65-2fc62e57b093",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8/run",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
										"run"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"run\": {\n        \"info\": {\n            \"jobId\": \"1ecee76a-e14e-47c0-bddc-256bf690c407\",\n            \"monitorId\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n            \"name\": \"Test Monitor\",\n            \"collectionUid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"environmentUid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"status\": \"success\",\n            \"startedAt\": \"2022-06-17T19:50:04.019Z\",\n            \"finishedAt\": \"2022-06-17T19:50:06.439Z\"\n        },\n        \"stats\": {\n            \"assertions\": {\n                \"total\": 0,\n                \"failed\": 0\n            },\n            \"requests\": {\n                \"total\": 1,\n                \"failed\": 0\n            }\n        },\n        \"executions\": [\n            {\n                \"id\": 1,\n                \"item\": {\n                    \"name\": \"Sample POST Request\"\n                },\n                \"request\": {\n                    \"method\": \"POST\",\n                    \"url\": \"http://echo.getpostman.com/post\",\n                    \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"User-Agent\": \"PostmanRuntime/7.29.0\",\n                        \"Accept\": \"*/*\",\n                        \"Cache-Control\": \"no-cache\",\n                        \"Postman-Token\": null,\n                        \"Host\": \"echo.getpostman.com\",\n                        \"Accept-Encoding\": \"gzip, deflate, br\",\n                        \"Connection\": \"keep-alive\",\n                        \"Content-Length\": \"0\"\n                    },\n                    \"body\": {\n                        \"contentLength\": 0\n                    },\n                    \"timestamp\": \"2022-06-17T19:50:06.186Z\"\n                },\n                \"response\": {\n                    \"code\": 200,\n                    \"body\": {\n                        \"contentLength\": 50\n                    },\n                    \"responseTime\": 49,\n                    \"responseSize\": 50,\n                    \"headers\": {\n                        \"Date\": \"Fri, 17 Jun 2022 19:50:06 GMT\",\n                        \"Content-Type\": \"text/plain\",\n                        \"Content-Length\": \"50\",\n                        \"Connection\": \"keep-alive\",\n                        \"Server\": null\n                    }\n                }\n            }\n        ],\n        \"failures\": []\n    }\n}"
						},
						{
							"id": "de18e853-95a6-456c-8774-85dc5ba15064",
							"name": "Monitor Run Failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8/run",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
										"run"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"run\": {\n        \"info\": {\n            \"jobId\": \"1ecee76a-e14e-47c0-bddc-256bf690c407\",\n            \"monitorId\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n            \"name\": \"Test Monitor\",\n            \"collectionUid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"environmentUid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"status\": \"failed\",\n            \"startedAt\": \"2022-06-17T20:00:41.659Z\",\n            \"finishedAt\": \"2022-06-17T20:00:42.693Z\"\n        },\n        \"stats\": {\n            \"assertions\": {\n                \"total\": 1,\n                \"failed\": 1\n            },\n            \"requests\": {\n                \"total\": 1,\n                \"failed\": 0\n            }\n        },\n        \"executions\": [\n            {\n                \"id\": 1,\n                \"item\": {\n                    \"name\": \"Sample POST Request\"\n                },\n                \"request\": {\n                    \"method\": \"POST\",\n                    \"url\": \"http://echo.getpostman.com/post\",\n                    \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"User-Agent\": \"PostmanRuntime/7.29.0\",\n                        \"Accept\": \"*/*\",\n                        \"Cache-Control\": \"no-cache\",\n                        \"Postman-Token\": null,\n                        \"Host\": \"echo.getpostman.com\",\n                        \"Accept-Encoding\": \"gzip, deflate, br\",\n                        \"Connection\": \"keep-alive\",\n                        \"Content-Length\": \"0\"\n                    },\n                    \"body\": {\n                        \"contentLength\": 0\n                    },\n                    \"timestamp\": \"2022-06-17T20:00:42.423Z\"\n                },\n                \"response\": {\n                    \"code\": 200,\n                    \"body\": {\n                        \"contentLength\": 50\n                    },\n                    \"responseTime\": 15,\n                    \"responseSize\": 50,\n                    \"headers\": {\n                        \"Date\": \"Fri, 17 Jun 2022 20:00:42 GMT\",\n                        \"Content-Type\": \"text/plain\",\n                        \"Content-Length\": \"50\",\n                        \"Connection\": \"keep-alive\",\n                        \"Server\": null\n                    }\n                }\n            }\n        ],\n        \"failures\": []\n    }\n}"
						},
						{
							"id": "d6b1e1b6-ca16-4d85-8439-e45b75b9e5ec",
							"name": "Monitor Run with Errors",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8/run",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
										"run"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"run\": {\n        \"info\": {\n            \"jobId\": \"1ecee76a-e14e-47c0-bddc-256bf690c407\",\n            \"monitorId\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n            \"name\": \"Test Monitor\",\n            \"collectionUid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"environmentUid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"status\": \"error\",\n            \"startedAt\": \"2022-06-17T20:04:47.183Z\",\n            \"finishedAt\": \"2022-06-17T20:04:48.858Z\"\n        },\n        \"stats\": {\n            \"assertions\": {\n                \"total\": 4,\n                \"failed\": 2\n            },\n            \"requests\": {\n                \"total\": 4,\n                \"failed\": 3\n            }\n        },\n        \"executions\": [\n            {\n                \"id\": 1,\n                \"item\": {\n                    \"name\": \"Sample GET Request\"\n                },\n                \"request\": {\n                    \"method\": \"GET\",\n                    \"url\": \"https://example.com/search?format=json&state=&city=&country=\",\n                    \"headers\": {\n                        \"User-Agent\": \"PostmanRuntime/7.29.0\",\n                        \"Accept\": \"*/*\",\n                        \"Cache-Control\": \"no-cache\",\n                        \"Postman-Token\": null,\n                        \"Host\": \"example.com\",\n                        \"Accept-Encoding\": \"gzip, deflate, br\",\n                        \"Connection\": \"keep-alive\"\n                    },\n                    \"body\": {\n                        \"contentLength\": 0\n                    },\n                    \"timestamp\": \"2022-06-17T20:04:47.926Z\"\n                },\n                \"response\": {\n                    \"code\": 200,\n                    \"body\": {\n                        \"contentLength\": 2\n                    },\n                    \"responseTime\": 257,\n                    \"responseSize\": 2,\n                    \"headers\": {\n                        \"Server\": null,\n                        \"Date\": \"Fri, 17 Jun 2022 20:04:47 GMT\",\n                        \"Content-Type\": \"application/json; charset=UTF-8\",\n                        \"Transfer-Encoding\": \"chunked\",\n                        \"Connection\": \"keep-alive\",\n                        \"Keep-Alive\": null,\n                        \"Access-Control-Allow-Origin\": \"*\",\n                        \"Access-Control-Allow-Methods\": \"OPTIONS,GET\"\n                    }\n                },\n                \"errors\": [\n                    {\n                        \"name\": \"TypeError\",\n                        \"message\": \"Cannot read property 'lat' of undefined\"\n                    }\n                ]\n            }\n        ],\n        \"failures\": [\n            {\n                \"executionId\": 1,\n                \"name\": \"TypeError\",\n                \"message\": \"Cannot read property 'lat' of undefined\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Delete a monitor",
					"id": "1d65c760-71e7-48c8-96f3-1bfa6857a9d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/monitors/{{monitorUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors",
								"{{monitorUid}}"
							]
						},
						"description": "This endpoint can be used to delete an existing monitor using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "4651d4fd-8cc3-4ea6-83df-7afd6ea9f857",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"uid\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n    }\n}"
						},
						{
							"id": "64f41728-f628-4088-8dfd-dbeffc09b033",
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "813af79fd620c970d59f4e41275292a96873bb5065975eccf67a84cfdc24b448037430d26c2a29f4192ad492875ed7a0d53bbea8c63f760bb75c886624b4da560fc52c7f9f9e79837bee212f90b9a59c1dfcf94b95156b20f45169eab2ed93b0c38669819143ae41e45dfaac6a5f0cf6d5e76ca40134c3bd9ef9f5532ad6d179519aa0315fe4e6e157ee9d71c9f14aa9b0455ff84f94ae7519f1139d0cccdeeef7e2aafe1696cf640ec874c62d4d5bda3dbe17cf6083fb276b7f3355eb19162430f171166d19a7d79da028c76b3c2b97e88c93dc7183bc486d9d331b93b9a20de1216e84ca74f7b6887df61785d0b65be19f56283523f211fd43a772afa39aadc3b8dc011ba680b69a7e4fcda83be75d593c8ce6c6997bf530b57a8036881ea3d5b3c28d096099ca712f5d6916b453f1b338c455c4f861da638dffd05fd2a3dd5b9dd6dbe5f2c3a30e304363c9c2bcfbe5d9abeba9c06df16d155a70c6b0a9848f7446a5646e58640d7fad642df11350f528e4bacb5c446986cddf8f0c7ad10ec1067daccca962d6fb90aad8db55c2ffa1dc8716865350d5127cb69e44cfc4511836cbc5828c1c01370c7464fef1f07c716456a57a467bc1445ea88b705ef9c0c068948a73dca851804663befbc2d9aec7cfc3a2daf377b1a8c020091216d82504ff9b38c84234ad9b6f8c596a",
									"key": "postman.sid"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "b8ee90dd180562a5a21edad92ea0b987583b7599811884947b9aae88d0c060e8abb0c337534285da6defa4cfabba320b37b611b2c9586b81cb38220830b58440a2ff03756c898b89eb08799bc486c7dc08643ef1ee6e38e5988c4aafda47f1ed26c4218a23620f43d57aa19bb7f79762b394384215a7805e6b1c2cc092b6ac5ad8e8848b1ce655edba6f52820a2ac5acf3d289dda878c6a1fe62e88bb4159f605e8081afa2afce7a72a0c5d96515d566bcbf9cb3842cfc2b7f3a48badbcbfb9e5907b6451674d2c09cf6bf0b34b967edfc3a6389a834f7be21592ba2fbf7aa9eaaa6b87f99590813ded37c6e4ad17e7afcca74455b703d2d653e6ce063ce8eb195ce46c910a1b61fb71f13a8cb52ab2a7bded1b9b5a6b56ad5a66ceafc20afc70962a1f49b8abf2ce3f9e7cf3f44aaf0f41f81605b4ee612f3044d81b787a7cb128c56474a25cdc13803e9057603ead1f1fd6666ae5467ca9e250bb228dfd11dafd16345019bb7e06c58b27bf69d550cbfcef348bc746fdea61d4ea93c48d5f5e4e729adf18655669170f0a059025a79fb2a48f924d9748895a42780d1a9fae32ebf2d57df434c60b675412e217d126b9edbd28b949dfcbcbc8518aa51339d3e1d1f37c6cac4866064c54a476cf94d749a570938a7ad3ce28a9f1c5ea6623b",
									"key": "postman-staging.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"serverError\",\n        \"message\": \"An error has occurred on the server.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get all monitors",
					"id": "b72d1db7-c007-4a26-82ef-09d977512fad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/monitors",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors"
							]
						},
						"description": "The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.\n\nThe response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "db24a974-2056-4280-913a-53198d943c53",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
									"key": "postman.sid"
								}
							],
							"body": "{\n  \"monitors\": [\n    {\n      \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n      \"name\": \"Test Monitor\",\n      \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n      \"owner\": 12345678\n    },\n    {\n      \"id\": \"1e6b6cb7-f13d-4000-acb7-0695757174a8\",\n      \"name\": \"Postman Echo Monitor\",\n      \"uid\": \"87654321-1e6b6cb7-f13d-4000-acb7-0695757174a8\",\n      \"owner\": 87654321\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get a monitor",
					"id": "47899daa-54db-4fe0-be98-6173c821ae8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/monitors/{{monitorUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors",
								"{{monitorUid}}"
							]
						},
						"description": "This endpoint fetches you basic information about the monitor using its `uid`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "f240b8d7-8ad1-4414-ab4c-d16ed71b1c82",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
									"key": "postman.sid"
								}
							],
							"body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"name\": \"Test Monitor\",\n        \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"owner\": 12345678,\n        \"collectionUid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"environmentUid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n        \"options\": {\n            \"strictSSL\": true,\n            \"followRedirects\": true,\n            \"requestTimeout\": 3000,\n            \"requestDelay\": 0\n        },\n        \"notifications\": {\n            \"onError\": [\n                {\n                    \"email\": \"user@example.com\"\n                }\n            ],\n            \"onFailure\": [\n                {\n                    \"email\": \"user@example.com\"\n                }\n            ]\n        },\n        \"distribution\": [],\n        \"schedule\": {\n            \"cron\": \"0 0 * * * *\",\n            \"timezone\": \"America/Chicago\",\n            \"nextRun\": \"2022-06-18T05:00:00.000Z\"\n        },\n        \"lastRun\": {\n            \"status\": \"failed\",\n            \"startedAt\": \"2022-06-17T18:39:52.852Z\",\n            \"finishedAt\": \"2022-06-17T18:39:53.707Z\"\n        },\n        \"stats\": {\n            \"assertions\": {\n                \"total\": 8,\n                \"failed\": 1\n            },\n            \"requests\": {\n                \"total\": 4\n            }\n\t\t}\n\t}\n}"
						},
						{
							"id": "0c791b47-0739-4b1f-b6c6-4ceaea50f822",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
									"key": "postman.sid"
								}
							],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified monitor does not exist.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update a monitor",
					"id": "55d9e99e-c25e-4241-85f0-6b18699ceae9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"{{monitorName}}\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"{{cronFrequencyPattern}}\",\n            \"timezone\": \"{{monitorTimezone}}\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/monitors/{{monitorUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors",
								"{{monitorUid}}"
							]
						},
						"description": "This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.\n\nSome example `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "20cc6ef5-7f5a-4a2c-a05f-41e41734d57c",
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"Test Monitor\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"*/5 * * * *\",\n\t\t\t\"timezone\": \"America/Chicago\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "yes",
									"key": "getpostmanlogin"
								},
								{
									"expires": "Invalid Date",
									"hostOnly": false,
									"httpOnly": false,
									"domain": "getpostman.com",
									"path": "/",
									"secure": false,
									"session": false,
									"value": "0e9f9b1f3e7218e7fd625cca14597bc771064a433bdd75b5a40196cef86c3fa29d483358e0b254b0a097ac305b132ec8481e2c5b835663fbed3bbb93b5a747cf8776efe85650e29a8e5f0a63906480e5b9e5a9860bef703234812ce9f65ea6dcbc099ac952d1c36338e2d192a793b82a1d8a2dd6dd031f831c08805a9e7ea1f55d46c54cf6ecaecbac84ddf581c8a267a116c0d6d935f19171bce93c6e040c0bd49fc1325bdb8929914548d7c0cae78796aba4073dc9ab63194a90e430919d8757c7ccb7b4dffc61b9cd4a748edc88d0b4ba727c83ea1af546908ff63a1e2ee9784a7b9af2f61997e0dd34adcb479151d11d0e8d67ba76050d55c7bbb88f2f700e14f848f6b929b441869fba53436eb7983660d0e4af82aa0dc5c47dddf974599280179889c03c3e38212eaa8270c641298f0a49b923ed3d04d61e2c6c25844b67df9e4814d378b440e8124e429dc292a147038a57c03e8b8ece700b376fcf8e002dca35142f97b5f49144e2f7477b99d767dff12bb37dd846419051bdaa4c6d931545a5df09bda8a80a336585e5d6ba44f087607512344f91321a359dc150cb411600fbf0d974f63116046d681d3f82a16e50e3bb69c463430e284f64e007f354a9ed4a2afdb27caad0414d451875ec78ea98924e32d8f881eb2c260b348e00baf782",
									"key": "postman.sid"
								}
							],
							"body": "{\n    \"monitor\": {\n        \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n        \"name\": \"Test Monitor\",\n        \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n    }\n}"
						},
						{
							"id": "ecd8e8f1-dffb-4250-8632-131088ce117e",
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"monitor\": {\n\t\t\"name\": \"Test Monitor\",\n\t\t\"schedule\": {\n\t\t\t\"cron\": \"*/5 * * * *\",\n\t\t\t\"timezone\": \"America/Chicago\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/monitors/12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"monitors",
										"12345678-1e6b6cb7-f13d-4000-acb7-0695757174a8"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified monitor does not exist.\"\n    }\n}"
						}
					]
				}
			],
			"id": "1326b45c-3981-4a1c-91da-93f4036306f0",
			"description": "The `/monitors` endpoints let you manage your [monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/)."
		},
		{
			"name": "Workspaces",
			"item": [
				{
					"name": "Update a workspace",
					"id": "5748ff91-af3e-426c-97d3-e06e9ef8ae3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workspace\": {\n        \"name\": \"{{workspaceName}}\",\n        \"description\": \"{{workspaceDescription}}\",\n        \"type\": \"{{workspaceType}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/workspaces/{{workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces",
								"{{workspaceId}}"
							]
						},
						"description": "Updates a workspace. You can use the following request body properties to update the workspace:\n\n*   `name` — A **string** that contains the workspace's new name.\n*   `type` — Optional. A **string** that contains the workspace type:\n    *   `personal` — A personal workspace.\n    *   `team` — A team workspace.\n*   `description` — Optional. A **string** that contains the new workspace description.\n    \n\n**Note:**\n\nYou can change a workspace's `type` from `personal` to `team`, but you **cannot** change a workspace from `team` to `personal`.\n\n### **Important:**\n\nWe **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.\n\nIf you have a linked collection or environment, note the following:\n\n*   The endpoint does **not** create a clone of a collection or environment.\n*   Any changes you make to a linked collection or environment changes them in **all** workspaces.\n*   If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces."
					},
					"response": [
						{
							"id": "ef08ea01-a36c-49a8-b0d9-545d9fc78a23",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"description\": \"This is a test team workspace.\",\n        \"type\": \"team\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Test Workspace\"\n    }\n}"
						},
						{
							"id": "26e6c821-502e-45c1-9c16-d25aa9ea84a8",
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"description\": \"This is a test team workspace.\",\n        \"type\": \"team\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified workspace does not exist.\"\n    }\n}"
						},
						{
							"id": "2e24357f-bc9a-4d9b-a39c-e3091765e712",
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"description\": \"This is a test team workspace.\",\n        \"type\": \"team\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You do not have access to update this workspace.\"\n    }\n}"
						},
						{
							"id": "a0aeb54f-2bf3-419a-9470-254d874d285c",
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"description\": \"This is a test team workspace.\",\n        \"type\": \"team\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidUIDError\",\n        \"message\": \"The ID provided is not a valid UID.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Create a workspace",
					"id": "07bfcaf2-25a8-4db4-baa5-42825ae8a847",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workspace\": {\n        \"name\": \"{{workspaceName}}\",\n        \"description\": \"{{workspaceDescription}}\",\n        \"type\": \"{{workspaceType}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/workspaces",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces"
							]
						},
						"description": "Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). Include the following properties in the request body:\n\n* `name` — A **string** that contains the workspace's name.\n* `type` — A **string** that contains the workspace type:\n    * `personal` — A personal workspace.\n    * `team` — A team workspace.\n\nYou can include the following optional properties in the request body:\n\n* `description` — A **string** that contains a description of the workspace.\n\n### **Important:**\n\nWe **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.\n\nIf you have a linked collection or environment, note the following:\n\n* The endpoint does **not** create a clone of a collection or environment.\n* Any changes you make to a linked collection or environment changes them in **all** workspaces.\n* If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces."
					},
					"response": [
						{
							"id": "67b6cc07-e9c8-4f13-b079-82494ad84990",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"This is a test personal workspace.\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Test Workspace\"\n    }\n}"
						},
						{
							"id": "8dc24b1f-027e-47a7-bfbf-43b588047f4c",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workspace\": {\n        \"name\": \"Test Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"This is a test personal workspace.\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"Instance not found in the database.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get a workspace",
					"id": "05520762-e356-4e4a-8ce1-40515e13cb7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/workspaces/{{workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces",
								"{{workspaceId}}"
							]
						},
						"description": "Gets information about a workspace.\n\n**Note:**\n\nThis endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:\n\n* `only-me` — Applies to the **My Workspace** workspace.  \n* `personal` — Only you can access the workspace.  \n* `team` — All team members can access the workspace.  \n* `private-team` — Only invited team members can access the workspace.  \n* `public` — Everyone can access the workspace."
					},
					"response": [
						{
							"id": "f9f335ee-93ff-4dd1-a681-37c80a3df070",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Team Workspace\",\n        \"type\": \"team\",\n        \"description\": \"The Test team workspace.\",\n        \"visibility\": \"private-team\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"id": "80f35d0f-2e37-4fa3-a52e-d1f308b83422",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "The mime type of this content",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"Instance not found in the database.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete a workspace",
					"id": "f1fb20f6-26c2-4c1f-8f9d-1ec87cb6d4b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/workspaces/{{workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces",
								"{{workspaceId}}"
							]
						},
						"description": "Deletes an existing workspace.\n\n### **Important:**\n\nIf you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in **all** workspaces."
					},
					"response": [
						{
							"id": "a92a963f-f32c-46fb-b350-0e5d4640a8c0",
							"name": "Successful Response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\"\n    }\n}"
						},
						{
							"id": "c5100ea1-73c9-4382-b302-be0ce33b5612",
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified workspace does not exist.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get all workspaces",
					"id": "fd0a5e73-b4f5-4e08-a6ec-ab17a57d118e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/workspaces",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces"
							],
							"query": [
								{
									"key": "type",
									"value": "<string>",
									"description": "Optional. The type of workspace to filter the response by:\n\n* `team` — Return only team workspaces.\n* `personal` — Return only personal workspaces.",
									"disabled": true
								}
							]
						},
						"description": "Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.\n\n**Note:**\n\nThis endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:\n\n* `only-me` — Applies to the **My Workspace** workspace.\n* `personal` — Only you can access the workspace.\n* `team` — All team members can access the workspace.\n* `private-team` — Only invited team members can access the workspace.\n* `public` — Everyone can access the workspace."
					},
					"response": [
						{
							"id": "06e1cae5-8c03-408f-8e43-c7c62a92abb7",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces"
									],
									"query": [
										{
											"key": "type",
											"value": "<string>",
											"description": "Optional. The type of workspace to filter the response by:\n\n* `team` — Return only team workspaces.\n* `personal` — Return only personal workspaces.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspaces\": [\n        {\n            \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n            \"name\": \"Test Workspace\",\n            \"type\": \"personal\",\n            \"visibility\": \"personal\"\n        },\n        {\n            \"id\": \"f8801e9e-03a4-4c7b-b31e-5db5cd771696\",\n            \"name\": \"Team Workspace\",\n            \"type\": \"team\",\n            \"visibility\": \"private-team\"\n        }\n    ]\n}"
						},
						{
							"id": "6f1a243e-bff2-40ef-9a39-08f4d670ba96",
							"name": "Filter by Type",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces?type=personal",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces"
									],
									"query": [
										{
											"key": "type",
											"value": "personal",
											"description": "Optional. The type of workspace to filter the response by:\n\n* `team` — Return only team workspaces.\n* `personal` — Return only personal workspaces."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspaces\": [\n        {\n            \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n            \"name\": \"Test Workspace\",\n            \"type\": \"personal\",\n            \"visibility\": \"personal\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "7cb81791-e610-4c8e-981a-26985faa2c2e",
			"description": "The `/workspaces` endpoints let you manage your [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/)."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get authenticated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "48c892af-e1a5-4003-8839-298528ca5232"
							}
						}
					],
					"id": "a73c58e7-d2ac-4fd5-b5e7-47e2c3f986e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/me",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"me"
							]
						},
						"description": "Gets information about the authenticated user."
					},
					"response": [
						{
							"id": "fed1a3e7-dc61-4c5c-af77-221bda065c6d",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/me",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"user\": {\n        \"id\": 12345678,\n        \"username\": \"taylor-lee\",\n        \"email\": \"taylor.lee@example.com\",\n        \"fullName\": \"Taylor Lee\",\n        \"avatar\": \"https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg\",\n        \"isPublic\": true\n    },\n    \"operations\": [\n        {\n            \"name\": \"mock_usage\",\n            \"limit\": 1000000,\n            \"usage\": 110276,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"monitor_request_runs\",\n            \"limit\": 10000000,\n            \"usage\": 1141750,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"api_usage\",\n            \"limit\": 1000000,\n            \"usage\": 16240,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"custom_domains\",\n            \"limit\": 25,\n            \"usage\": 25,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"serverless_requests\",\n            \"limit\": 10000,\n            \"usage\": 0,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"integrations\",\n            \"limit\": 5000,\n            \"usage\": 1018,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"cloud_agent_requests\",\n            \"limit\": 1000000,\n            \"usage\": 1615,\n            \"overage\": 0\n        }\n    ]\n}"
						}
					]
				}
			],
			"id": "fdbb0b77-a6fd-4420-a1ea-2ff69497a0f9",
			"description": "The `/me` endpoints let you manage information about the authenticated user."
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Import an OpenAPI definition",
					"id": "86fbaf90-af0e-4f7c-9282-56b60f74cec6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\" : \"{{APIspecificationType}}\",\n  \"input\": {{APIspecification}}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/import/openapi",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"import",
								"openapi"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Imports an OpenAPI definition into Postman as a new [Postman Collection](https://learning.postman.com/docs/getting-started/creating-the-first-collection/).\n\nInclude the following properties in the request body:\n\n*   `type` — A **string** that contains the definition's type. One of:\n    *   `string`\n    *   `json`\n    *   `file`\n*   `input` — The OpenAPI definition, based on the `type` value:\n    *   For `string`, the definition's stringified JSON object.\n    *   For `json`, the definition's JSON object.\n    *   For `file`, a definition file. To import a file, the request body **must** be a `form-data` request and include the `type` key with the `file` value.\n\nFor more information, refer to the collection's examples.\n\n**Note:**\n\nIf you import with the `file` input method, you **must** use the Postman desktop app. The Postman web app does not support this method type."
					},
					"response": [
						{
							"id": "41adffd2-085a-486e-bc93-fae3c609e7fb",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test API\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ],\n    \"environments\": []\n}"
						},
						{
							"id": "899b8420-fc43-4389-8b1a-defc96125136",
							"name": "Import an OpenAPI Definition to a Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/import/openapi?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"import",
										"openapi"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ],\n    \"environments\": []\n}"
						},
						{
							"id": "af552b52-e090-447b-a9af-a9b98b3b7a18",
							"name": "Import a Stringified OpenAPI Definition",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ],\n    \"environments\": []\n}"
						},
						{
							"id": "63829f3b-ae0f-4523-8769-d06dbc3b478f",
							"name": "Import a File",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ],\n    \"environments\": []\n}"
						},
						{
							"id": "fd6e7243-cf99-4f4e-a700-cdbc30d41fd6",
							"name": "Invalid Parameters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The request body has invalid values for the type parameter. Value must be one of file, string, json\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
						},
						{
							"id": "fdb9d372-8c0b-45e6-bae1-c2695fc91387",
							"name": "Missing Parameters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"The request body is missing a value for the type parameter. Check your request and try again.\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
						},
						{
							"id": "3b36ab3f-b529-419b-b95e-bcf8c3027121",
							"name": "Malformed Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the OpenAPI specification.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidSchemaError\",\n        \"message\": \"Specification must contain a semantic version number of the OAS specification\"\n    }\n}"
						}
					]
				},
				{
					"name": "Import an exported Postman data dump file",
					"id": "3a310724-0173-4043-adac-6204dc78eb6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "type",
									"value": "file",
									"description": "Required. The `file` type value.",
									"type": "text"
								},
								{
									"key": "input",
									"description": "Required. A file containing a valid user's export .zip file.",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "https://api.getpostman.com/import/exported",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"import",
								"exported"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. The workspace ID in which to import the exported Postman data dump file.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Imports exported Postman data. This endpoint **only** accepts [export data dump files](https://postman.postman.co/me/export).\n\nFor more information, read our [Exporting data dumps](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/#exporting-data-dumps) documentation.\n\n## Important\n\nThis endpoint is **deprecated**."
					},
					"response": [
						{
							"id": "a60da575-b4ef-4fb1-940e-2272b288e260",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the exported Postman data dump file.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"collections\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test API\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ]\n}"
						},
						{
							"id": "f8531117-7527-4b17-b1ea-742a740af749",
							"name": "Invalid Parameters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the exported Postman data dump file.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The request body has invalid values for the type parameter. Value must be one of file, string, json\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
						},
						{
							"id": "1d47292e-ff8e-48f1-94a1-ab8a7c99be1b",
							"name": "Missing Parameter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to import the exported Postman data dump file.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"The request body is missing a value for the type parameter. Check your request and try again.\",\n        \"details\": {\n            \"param\": \"type\"\n        }\n    }\n}"
						}
					]
				}
			],
			"id": "96caf3ea-e81e-4dc7-9049-e8a15fd2e5e8",
			"description": "The `/import` endpoints let you manage [importing and exporting](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/) Postman data.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e819f613-56aa-4c45-8d09-7061e82a7c56"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "67a0a88d-e76b-4f46-8370-9a8c84ff4756"
					}
				}
			]
		},
		{
			"name": "API",
			"item": [
				{
					"name": "API Version",
					"item": [
						{
							"name": "Get an API version",
							"id": "285d5abe-c65e-412f-af13-11a8b94ccb82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}"
									]
								},
								"description": "Gets information about an API version."
							},
							"response": [
								{
									"id": "f0e6dde4-d44d-42aa-a467-3613b7ea12d0",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"version\": {\n        \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n        \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n        \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n        \"name\": \"v1\",\n        \"summary\": \"Test API.\",\n        \"stage\": \"Planning\",\n        \"visibility\": \"public\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"repositoryIntegration\": null,\n        \"lastRevision\": null,\n        \"api\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n        \"schema\": [\n            \"16bb367e-fafb-4ef3-933b-ee3d971866fb\"\n        ]\n    }\n}"
								},
								{
									"id": "93d605fb-1b6b-431a-99d2-188cac202789",
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get all API versions",
							"id": "8d685a6a-d928-4bbe-aa7a-6ac19e210e22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions"
									]
								},
								"description": "Gets information about an API's versions."
							},
							"response": [
								{
									"id": "3beaed86-cb42-4b30-90e7-d3e29cd78e11",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"versions\": [\n        {\n            \"createdAt\": \"2022-06-30T16:46:35.000Z\",\n            \"updatedAt\": \"2022-06-30T19:53:14.000Z\",\n            \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n            \"name\": \"v1\",\n            \"summary\": null,\n            \"stage\": \"Planning\",\n            \"visibility\": \"public\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"repositoryIntegration\": null,\n            \"lastRevision\": null,\n            \"api\": \"387c2863-6ee3-4a56-8210-225f774edade\"\n        },\n        {\n            \"createdAt\": \"2022-07-01T17:23:11.000Z\",\n            \"updatedAt\": \"2022-07-01T18:03:24.000Z\",\n            \"id\": \"8421a1f3-3262-4d47-a597-7005bf4c1564\",\n            \"name\": \"v2\",\n            \"summary\": null,\n            \"stage\": \"Planning\",\n            \"visibility\": \"public\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"repositoryIntegration\": null,\n            \"lastRevision\": null,\n            \"api\": \"387c2863-6ee3-4a56-8210-225f774edade\"\n        }\n    ]\n}"
								},
								{
									"id": "30e30987-7e2f-4699-b69b-517829da2248",
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								}
							]
						},
						{
							"name": "Create an API version",
							"id": "f5b990ae-9487-4f88-ab10-f777e89b977b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"version\": {\n\t\t\"name\": \"{{apiVersionName}}\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": {{boolean}},\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": {{boolean}},\n\t\t\t\t\"mock\": {{boolean}},\n\t\t\t\t\"documentation\": {{boolean}},\n                \"test\": {{boolean}},\n                \"environment\": {{boolean}}\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions"
									]
								},
								"description": "Creates a new API version. Include the following request body properties in the `version` object:\n\n*   `name` — Required. A **string** that contains the API version's name.\n*   `source` — An **object** that contains the following properties:\n    *   `id` — A **string** that contains an API version's ID to copy to the created API version.\n    *   `schema` — A **boolean** value. If true, copy the API definition to the new API version.\n    *   `relations` — An **object** that contains the relation types to copy to the new API version. Each property is a **boolean** value that, if true, copies to the new API version. If you do **not** include any the following properties, the system does **not** copy them over (defaults to the `false` value):\n        *   `monitor`\n        *   `mock`\n        *   `documentation`\n        *   `test`\n        *   `environment`"
							},
							"response": [
								{
									"id": "a459f7ed-560b-45a1-a595-f3497cc8361d",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"version\": {\n        \"id\": \"8421a1f3-3262-4d47-a597-7005bf4c1564\",\n        \"name\": \"v1\",\n        \"api\": \"387c2863-6ee3-4a56-8210-225f774edade\"\n    }\n}"
								},
								{
									"id": "c2aa2026-a1b3-4abb-87f9-efd7260eda0a",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {\n        \"name\": \"v1\",\n        \"source\": {\n            \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n            \"schema\": true,\n            \"relations\": {\n                \"documentation\": true,\n                \"environment\": true,\n                \"mock\": true,\n                \"monitor\": true\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update an API version",
							"id": "2ad76ba3-2e72-4ecb-a9a3-3ea98e2f8592",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"version\": {\n\t\t\"name\": \"{{apiVersionName}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}"
									]
								},
								"description": "Updates an API version. Include the following request body properties in the `version` object:\n\n*   `name` — A **string** that contains the API version's name."
							},
							"response": [
								{
									"id": "d9cf3f31-9314-4644-b3e3-26a8da47af6c",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"version\": {\n        \"createdAt\": \"2022-08-02T13:28:05.000Z\",\n        \"updatedAt\": \"2022-08-02T13:35:32.000Z\",\n        \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n        \"name\": \"v1.0\",\n        \"summary\": null,\n        \"stage\": \"Planning\",\n        \"visibility\": \"public\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"repositoryIntegration\": null,\n        \"api\": \"387c2863-6ee3-4a56-8210-225f774edade\"\n    }\n}"
								},
								{
									"id": "59a9e24f-5690-4b52-a3ad-586aa21361e4",
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {\n        \"name\": \"v1.0\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete an API version",
							"id": "b9a7566d-214c-4e9d-83f6-1feb8de62157",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}"
									]
								},
								"description": "Deletes an API version."
							},
							"response": [
								{
									"id": "9261034c-8919-42ce-b12b-dd650fda1ebc",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"version\": {\n        \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\"\n    }\n}"
								},
								{
									"id": "12107bbb-fe57-4f34-8c3d-66f7390852c0",
									"name": "Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API version you are looking for\"\n    }\n}"
								}
							]
						}
					],
					"id": "ef78c533-e402-4596-a939-e44e8501799f",
					"description": "The API version endpoints let you manage your [API's versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d1d0d24a-3340-49dc-9fa5-ddd228f1156c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3981b312-7aed-498e-ae39-54b0c9a2954c"
							}
						}
					]
				},
				{
					"name": "Relations",
					"item": [
						{
							"name": "Get monitor relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "5f53205e-e39b-4f22-a796-712a866011f5"
									}
								}
							],
							"id": "66b9c159-ba38-41e0-9aa3-4c23fb11ca38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/monitor",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"monitor"
									]
								},
								"description": "Gets an API version's monitor relations."
							},
							"response": [
								{
									"id": "f0683496-4390-4a06-9dc3-507e14b9f35d",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/monitor",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"monitor"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"monitor\": [\n        {\n            \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n            \"name\": \"Test Monitor\",\n            \"updatedAt\": \"2022-07-10T05:00:25.066Z\",\n            \"monitorId\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get  documentation relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "1deba3bd-76bd-431f-9ae7-d1c6ae581161"
									}
								}
							],
							"id": "d396cd63-95a6-47dc-acc4-85dbed9576c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/documentation",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"documentation"
									]
								},
								"description": "Gets an API version's documentation relations."
							},
							"response": [
								{
									"id": "555063ba-09d0-4a11-8ea4-a199ae58f695",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/documentation",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"documentation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"documentation\": [\n        {\n            \"id\": \"b9bccf0f-e06a-433d-b556-a3cd158f0270\",\n            \"name\": \"Test Collection\",\n            \"createdAt\": \"2022-07-08T20:29:35.000Z\",\n            \"updatedAt\": \"2022-07-08T20:31:06.000Z\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get integration test relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "cc1e7f9d-e170-444d-a993-54b3a14416ef"
									}
								}
							],
							"id": "b467f81b-f583-4fd9-a864-b07bec4fad48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/integrationtest",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"integrationtest"
									]
								},
								"description": "This endpoint is **deprecated**. Use the **Get all test relations** endpoint."
							},
							"response": [
								{
									"id": "9cf68b38-717f-41a0-8902-b760231f6cbd",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/integrationtest",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"{{apiId}}",
												"versions",
												"{{apiVersionId}}",
												"relations",
												"integrationtest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"integrationtest\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get test suite relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "17b1082f-04b2-432d-b5aa-cc3a35bb045d"
									}
								}
							],
							"id": "1c5ce309-0c8e-455d-9a6b-837568325592",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/testsuite",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"testsuite"
									]
								},
								"description": "This endpoint is **deprecated**. Use the **Get all test relations** endpoint."
							},
							"response": [
								{
									"id": "3e7cf61c-229f-4be7-86f0-afbea8a5d2e3",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/testsuite",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"{{apiId}}",
												"versions",
												"{{apiVersionId}}",
												"relations",
												"testsuite"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"testsuite\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get all linked relations",
							"id": "b2dea7c3-1ca0-431b-a5f4-488101ea6735",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"relations"
									]
								},
								"description": "Gets all of an API version's relations."
							},
							"response": [
								{
									"id": "d0019baf-9665-4cb3-b13d-4abb196807b7",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/relations",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"relations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"relations\": {\n        \"schema\": {\n            \"16bb367e-fafb-4ef3-933b-ee3d971866fb\": {\n                \"id\": \"16bb367e-fafb-4ef3-933b-ee3d971866fb\"\n            }\n        },\n        \"documentation\": {\n            \"b9bccf0f-e06a-433d-b556-a3cd158f0270\": {\n                \"id\": \"b9bccf0f-e06a-433d-b556-a3cd158f0270\",\n                \"name\": \"Test Collection\",\n                \"createdAt\": \"2022-07-08T16:38:54.000Z\",\n                \"updatedAt\": \"2022-07-08T16:38:54.000Z\"\n            }\n        },\n        \"environment\": {\n            \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\": {\n                \"id\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"createdAt\": \"2022-07-08T16:27:56.000Z\",\n                \"updatedAt\": \"2022-07-08T17:14:18.000Z\"\n            }\n        },\n        \"uptimemonitor\": {\n            \"ab19624d-5425-45f0-a672-bd99f8b4991d\": {\n                \"id\": \"ab19624d-5425-45f0-a672-bd99f8b4991d\",\n                \"name\": \"Test Uptime Monitor\",\n                \"createdAt\": \"2022-07-08T16:47:10.000Z\",\n                \"updatedAt\": \"2022-07-11T18:00:03.014Z\"\n            }\n        },\n        \"monitor\": {\n            \"1ecfedca-f067-4920-8a53-ec3ec0f416bf\": {\n                \"id\": \"1ecfedca-f067-4920-8a53-ec3ec0f416bf\",\n                \"name\": \"Test Monitor A\",\n                \"createdAt\": \"2022-07-08T16:40:33.000Z\",\n                \"updatedAt\": \"2022-07-10T05:00:25.066Z\"\n            }\n        },\n        \"mock\": {\n            \"e3d951bf-873f-49ac-a658-b2dcb91d3289\": {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"createdAt\": \"2022-07-08T16:26:51.000Z\",\n                \"updatedAt\": \"2022-07-08T16:26:50.000Z\",\n                \"url\": \"https://04f3b440-665d-4066-a3db-9d87e566858e.mock.pstmn.io\"\n            }\n        },\n        \"test\": {\n            \"12ece9e1-2abf-4edc-8e34-de66e74114d2\": {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"createdAt\": \"2022-07-08T18:32:49.000Z\",\n                \"updatedAt\": \"2022-07-08T18:32:23.000Z\"\n            }\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Get all test relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "9b21bb42-9ae6-4203-bc28-f899d1d49f37"
									}
								}
							],
							"id": "694c1dfb-83fe-4279-aaae-2998edb81fe1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/test",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"test"
									]
								},
								"description": "Gets all of an API version's test relations."
							},
							"response": [
								{
									"id": "adc161cd-6fe6-4a13-926d-0ae142e339f3",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/test",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"test"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"test\": [\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"updatedAt\": \"2022-07-08T18:32:23.000Z\",\n            \"collectionId\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Sync API relations with definition",
							"id": "359210dc-ad10-4bdd-ae11-0854dad431a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/:relationType/:entityId/syncWithSchema",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										":relationType",
										":entityId",
										"syncWithSchema"
									],
									"variable": [
										{
											"key": "relationType",
											"value": "{{relationType}}",
											"description": "The relation type. One of:\n* `documentation`\n* `test`\n* `mock`\n* `monitor`"
										},
										{
											"key": "entityId",
											"value": "{{entityId}}",
											"description": "The entity's ID value:\n* For `documentation` and `test` — The collection UID value.\n* For `environment` — The environment UID value.\n* For `mock` — The mock ID value.\n* For `monitor` — The monitor ID value."
										}
									]
								},
								"description": "Syncs an API version's relation with the API's definition."
							},
							"response": [
								{
									"id": "55f8878b-e6dd-4605-97ac-d1ec8625157c",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/4ebb45f8-7bb3-4a63-9c42-0b1602818293/versions/5e154147-b571-4ffe-a6ac-df2ab3b6e5ba/mock/e3d951bf-873f-49ac-a658-b2dcb91d3289/syncWithSchema",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"4ebb45f8-7bb3-4a63-9c42-0b1602818293",
												"versions",
												"5e154147-b571-4ffe-a6ac-df2ab3b6e5ba",
												"mock",
												"e3d951bf-873f-49ac-a658-b2dcb91d3289",
												"syncWithSchema"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"success\": true\n}"
								},
								{
									"id": "82217713-559d-4cdd-b6f7-4121d6c46d3c",
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/4ebb45f8-7bb3-4a63-9c42-0b1602818293/versions/5e154147-b571-4ffe-a6ac-df2ab3b6e5ba/mock/e3d951bf-873f-49ac-a658-b2dcb91d3289/syncWithSchema",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"4ebb45f8-7bb3-4a63-9c42-0b1602818293",
												"versions",
												"5e154147-b571-4ffe-a6ac-df2ab3b6e5ba",
												"mock",
												"e3d951bf-873f-49ac-a658-b2dcb91d3289",
												"syncWithSchema"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the mock you are looking for\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get environment relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "6ebf40da-9a32-4228-8aa2-d4aebec9b088"
									}
								}
							],
							"id": "ecba9d71-c8ee-45d6-92dc-77f881d3b7ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/environment",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"environment"
									]
								},
								"description": "Gets an API version's environment relations."
							},
							"response": [
								{
									"id": "c0749061-23a7-48c1-99fb-70409519106a",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/environment",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"environment"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"environment\": [\n        {\n            \"id\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\",\n            \"name\": \"Test Environment\",\n            \"createdAt\": \"2022-07-08T20:32:48.000Z\",\n            \"updatedAt\": \"2022-07-08T20:31:30.000Z\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get contract test relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "5ec79f29-c9c2-4376-bc9a-053202384b77"
									}
								}
							],
							"id": "3143b6f6-9081-4a01-8a3b-5748b741fb38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/contracttest",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"contracttest"
									]
								},
								"description": "This endpoint is **deprecated**. Use the **Get all test relations** endpoint."
							},
							"response": [
								{
									"id": "3cf3a7ac-3594-4419-be47-95e0d866870b",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/contracttest",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"{{apiId}}",
												"versions",
												"{{apiVersionId}}",
												"relations",
												"contracttest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"contracttest\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create relations",
							"id": "0e1db34f-ba0b-4f7f-bb96-6f94dff537e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"{{relationType}}\": [\n        \"{{entityId}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"relations"
									]
								},
								"description": "Creates a new relation for an API version. The request body must contain a relation type key value and array that contains a comma-separated list of the corresponding entity ID values:\n\n| **`relationType`** | **`entityId`** |\n| --- | --- |\n| `documentation` and `test` | A collection UID value. |\n| `environment` | An environment UID value. |\n| `mock` | A mock ID value. |\n| `monitor` | A monitor ID value. |\n\nThe endpoint accepts multiple `relationType` arrays in a single call. For an example, see the example response documentation.\n\n**Note:**\n\nThe `documentation` and `test` values returned in the response are the relation ID values, not the collection ID values."
							},
							"response": [
								{
									"id": "b86daca7-7b49-4479-80fa-a854d925d443",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/relations",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"relations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"documentation\": [\n        \"b4abc083-3ee2-4fc2-8959-29a7653a1c91\"\n    ],\n    \"environment\": [\n        \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n    ],\n    \"mock\": [\n        \"e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n    ],\n    \"monitor\": [\n        \"1ecfedca-f067-4920-8a53-ec3ec0f416bf\"\n    ],\n    \"test\": [\n        \"6092f316-b566-4ac8-9ee9-deee67e37c21\"\n    ]\n}"
								},
								{
									"id": "215c722e-df3d-4c75-b941-120a87915c87",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/relations",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"relations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The specified parameter is in an invalid format\"\n    }\n}"
								}
							]
						}
					],
					"id": "92034667-702a-4123-93cb-a6a5a774d3e8",
					"description": "The Relations endpoints let you manage your API's relations. [Relations](https://learning.postman.com/docs/designing-and-developing-your-api/developing-an-api/) are an API's connections to items such as documentation, tests, environments, mocks, and monitors."
				},
				{
					"name": "Schema",
					"item": [
						{
							"name": "Get a schema",
							"id": "28584f84-9515-49c2-aa24-b31a43581c1c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"schemas",
										"{{schemaId}}"
									]
								},
								"description": "Gets information about an API's definition."
							},
							"response": [
								{
									"id": "9a1fd702-ccc7-4e1b-bb6f-6162681e2e14",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas/16bb367e-fafb-4ef3-933b-ee3d971866fb",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas",
												"16bb367e-fafb-4ef3-933b-ee3d971866fb"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"schema\": {\n        \"id\": \"16bb367e-fafb-4ef3-933b-ee3d971866fb\",\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"createdAt\": \"2022-07-01T20:12:31.000Z\",\n        \"updatedAt\": \"2022-07-01T20:13:04.000Z\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"schema\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Test API\\\"\\n  },\\n  \\\"servers\\\": [\\n    {\\n      \\\"url\\\": \\\"http://locahost:3000\\\"\\n    }\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/user\\\": {\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"List all users\\\",\\n        \\\"operationId\\\": \\\"listUser\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"required\\\": true,\\n            \\\"description\\\": \\\"The user's ID.\\\",\\n            \\\"example\\\": 1234,\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"integer\\\",\\n              \\\"format\\\": \\\"int32\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"Information about the user.\\\",\\n            \\\"headers\\\": {\\n              \\\"x-next\\\": {\\n                \\\"description\\\": \\\"A link to the next page of responses.\\\",\\n                \\\"schema\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              }\\n            },\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/User\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"User\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"tag\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"code\\\",\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"code\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n          },\\n          \\\"message\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\",\n        \"apiVersion\": \"a9879d02-74bf-425a-bbec-6d27aa135507\"\n    }\n}"
								},
								{
									"id": "a39aff72-d8ee-4b19-8002-0542d78ae396",
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas/16bb367e-fafb-4ef3-933b-ee3d971866fb",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas",
												"16bb367e-fafb-4ef3-933b-ee3d971866fb"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								},
								{
									"id": "2c498b0c-a9df-4cd8-b2b1-8fade221de71",
									"name": "Definition Mismatch",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas/16bb367e-fafb-4ef3-933b-ee3d971866fb",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas",
												"16bb367e-fafb-4ef3-933b-ee3d971866fb"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"schemaApiVersionMismatchError\",\n        \"message\": \"The Schema ID provided does not belong to the API Version ID provided.\"\n    }\n}"
								}
							]
						},
						{
							"name": "Create a schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1da2a75c-7716-4236-8ab1-c8d9205099d2"
									}
								}
							],
							"id": "bc4c7389-7fd1-4286-8a5c-c7056b2c6984",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{apiDefinitionLanguage}}\",\n\t\t\"schema\": \"{{apiDefinition}}\",\n\t\t\"type\": \"{{apiDefinitionType}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"schemas"
									]
								},
								"description": "Creates an API definition. The request body must contain a `schema` object with the following properties:\n\n*   `type` — A **string** value that contains the API definition's type. One of:\n    *   `openapi3_1`\n    *   `openapi3`\n    *   `openapi2`\n    *   `openapi1`\n    *   `raml`\n    *   `raml1`\n    *   `wsdl1`\n    *   `wsdl2`\n    *   `graphql`\n    *   `proto2`\n    *   `graphql`\n    *   `proto3`\n*   `language` — A **string** value that contains the API definition's language. One of:\n    *   OpenAPI and RAML — `json` or `yaml`\n    *   GraphQL — `graphql`\n    *   WSDL — `xml`\n    *   Protobuf — `proto`\n*   `schema` — Optional. A **string** value that contains the API definition's contents."
							},
							"response": [
								{
									"id": "e1577652-611b-419b-bf98-c4f7b554fe26",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"schema\": {\n        \"id\": \"e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822\",\n        \"language\": \"json\",\n        \"apiVersion\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n        \"type\": \"openapi3\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2021-05-22T13:17:07.000Z\",\n        \"updatedAt\": \"2021-05-22T13:17:07.000Z\"\n    }\n}"
								},
								{
									"id": "0ffb15aa-3bc1-4cd1-8bc4-27bc583cb55c",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"json\",\n\t\t\"schema\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Test API\\\"\\n  },\\n  \\\"servers\\\": [\\n    {\\n      \\\"url\\\": \\\"http://locahost:3000\\\"\\n    }\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/user\\\": {\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"List all users\\\",\\n        \\\"operationId\\\": \\\"listUser\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"required\\\": true,\\n            \\\"description\\\": \\\"The user's ID.\\\",\\n            \\\"example\\\": 1234,\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"integer\\\",\\n              \\\"format\\\": \\\"int32\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"Information about the user.\\\",\\n            \\\"headers\\\": {\\n              \\\"x-next\\\": {\\n                \\\"description\\\": \\\"A link to the next page of responses.\\\",\\n                \\\"schema\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              }\\n            },\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/User\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"User\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"tag\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"code\\\",\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"code\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n          },\\n          \\\"message\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\",\n\t\t\"type\": \"openapi3\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceAlreadyExists\",\n        \"message\": \"A schema already exists for this API Version\"\n    }\n}"
								}
							]
						},
						{
							"name": "Create a collection from a schema",
							"id": "b3722c44-bce4-40a3-9c1f-cde7112e2776",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{collectionName}}\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"{{relationType}}\"\n\t\t}\t\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"schemas",
										"{{schemaId}}",
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. The workspace ID in which to created the collection.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								},
								"description": "Creates a collection and links it to an API as one or multiple relations.\n\nInclude the following properties in the request body:\n\n*   `name` — A **string** that contains the name of the collection.\n    \n\nYou can also include the following additional properties in the request body:\n\n*   `relations` — An **array** that contains a list of relations to created:\n    *   `contracttest` — **Deprecated.**\n    *   `integrationtest` — **Deprecated.**\n    *   `testsuite` — **Deprecated.**\n    *   `documentation`"
							},
							"response": [
								{
									"id": "6587b2be-3c01-4895-883b-187ba42f8870",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://api.getpostman.com/apis/be50acd7-414e-4d65-9443-f919b847e29a/versions/56d5f9ac-69a7-4255-8343-cde8ea25ef8b/schemas/f087f7b9-018f-447f-ba64-74cb981957ce/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"be50acd7-414e-4d65-9443-f919b847e29a",
												"versions",
												"56d5f9ac-69a7-4255-8343-cde8ea25ef8b",
												"schemas",
												"f087f7b9-018f-447f-ba64-74cb981957ce",
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
													"description": "Optional. The workspace ID in which to created the collection.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    },\n    \"relations\": [\n        {\n            \"type\": \"documentation\",\n            \"id\": \"d86b6c97-fdf9-4c37-825a-49b0223913c7\"\n        }\n    ]\n}"
								},
								{
									"id": "199caead-18ee-49c2-bfc4-3d7d3527ef5b",
									"name": "Create a Collection from a Definition in a Workspace",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Test Collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"documentation\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/be50acd7-414e-4d65-9443-f919b847e29a/versions/56d5f9ac-69a7-4255-8343-cde8ea25ef8b/schemas/f087f7b9-018f-447f-ba64-74cb981957ce/collections?workspace=c90a3482-f80d-43d6-9dfb-0830f5e43605",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"be50acd7-414e-4d65-9443-f919b847e29a",
												"versions",
												"56d5f9ac-69a7-4255-8343-cde8ea25ef8b",
												"schemas",
												"f087f7b9-018f-447f-ba64-74cb981957ce",
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
													"description": "Optional. The workspace ID in which to created the collection.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    },\n    \"relations\": [\n        {\n            \"type\": \"documentation\",\n            \"id\": \"d86b6c97-fdf9-4c37-825a-49b0223913c7\"\n        }\n    ]\n}"
								},
								{
									"id": "baaad9ee-c48e-4f59-a156-a159f66bfcc4",
									"name": "Invalid Parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Test Collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"mocks\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/be50acd7-414e-4d65-9443-f919b847e29a/versions/56d5f9ac-69a7-4255-8343-cde8ea25ef8b/schemas/f087f7b9-018f-447f-ba64-74cb981957ce/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"be50acd7-414e-4d65-9443-f919b847e29a",
												"versions",
												"56d5f9ac-69a7-4255-8343-cde8ea25ef8b",
												"schemas",
												"f087f7b9-018f-447f-ba64-74cb981957ce",
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
													"description": "Optional. The workspace ID in which to created the collection.\n\nIf you do not include this query parameter, the system defaults to the \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"invalidParamsError\",\n        \"message\": \"The specified parameter is in an invalid format\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update a schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "8baba7e5-0efe-4a9f-a208-f779a7d7c4b2"
									}
								}
							],
							"id": "0f68e098-576f-4b23-9d35-94b77f0ad9f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{apiDefinitionLanguage}}\",\n        \"schema\": \"{{apiDefinition}}\",\n\t\t\"type\": \"{{apiDefinitionType}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"schemas",
										"{{schemaId}}"
									]
								},
								"description": "Updates an API definition. The request body must contain a `schema` object with the following properties:\n\n*   `type` — A **string** value that contains the API definition's type. One of:\n    *   `openapi3_1`\n    *   `openapi3`\n    *   `openapi2`\n    *   `openapi1`\n    *   `raml`\n    *   `raml1`\n    *   `wsdl1`\n    *   `wsdl2`\n    *   `graphql`\n    *   `proto2`\n    *   `graphql`\n    *   `proto3`\n*   `language` — A **string** value that contains the API definition's language. One of:\n    *   OpenAPI and RAML — `json` or `yaml`\n    *   GraphQL — `graphql`\n    *   WSDL — `xml`\n    *   Protobuf — `proto`\n*   `schema` — Optional. A **string** value that contains the API definition's contents."
							},
							"response": [
								{
									"id": "4325b6e0-850a-4827-bbc5-1c7c677a3489",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas/16bb367e-fafb-4ef3-933b-ee3d971866fb",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas",
												"16bb367e-fafb-4ef3-933b-ee3d971866fb"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"schema\": {\n        \"id\": \"16bb367e-fafb-4ef3-933b-ee3d971866fb\",\n        \"language\": \"yaml\",\n        \"apiVersion\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n        \"type\": \"openapi3\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2021-05-22T13:17:07.000Z\",\n        \"updatedAt\": \"2021-05-22T13:17:07.000Z\"\n    }\n}"
								},
								{
									"id": "aacc0d05-dc38-459d-9f57-4821129ed2e8",
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"yaml\",\n\t\t\"schema\": \"openapi: 3.0.0\\ninfo:\\n  version: 1.0.0\\n  title: Test API\\nservers:\\n  - url: http://localhost:3000\\npaths:\\n  /user:\\n    get:\\n      summary: List all users\\n      operationId: listUser\\n      tags:\\n        - user\\n      parameters:\\n        - name: id\\n          in: query\\n          required: true\\n          description: The user's ID.\\n          example: 1234\\n          schema:\\n            type: integer\\n            format: int32\\n      responses:\\n        '200':\\n          description: Information about the user.\\n          headers:\\n            x-next:\\n              description: A link to the next page of responses.\\n              schema:\\n                type: string\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/User' \\ncomponents:\\n  schemas:\\n   User:\\n      type: object\\n      required:\\n        - id\\n        - name\\n      properties:\\n        id:\\n          type: integer\\n          format: int32\\n   Error:\\n      type: object\\n      required:\\n        - code\\n        - message\\n      properties:\\n        code:\\n          type: integer\\n          format: int32\\n        message:\\n          type: string\\n\",\n\t\t\"type\": \"openapi3\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/schemas/16bb367e-fafb-4ef3-933b-ee3d971866fb",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"schemas",
												"16bb367e-fafb-4ef3-933b-ee3d971866fb"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
								}
							]
						}
					],
					"id": "167ec465-4433-4cd4-b892-2b77087ff0c0",
					"description": "The Schema endpoints let you manage your API's definitions."
				},
				{
					"name": "Release",
					"item": [
						{
							"name": "Get an API release",
							"id": "a80c183d-1a67-4995-8db3-325ab6499e51",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/releases/{{apiReleaseId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"releases",
										"{{apiReleaseId}}"
									]
								},
								"description": "Gets information about an API version's release."
							},
							"response": [
								{
									"id": "46ec2228-2308-4931-b76d-c4c497220266",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases/3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases",
												"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"release\": {\n        \"id\": \"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2\",\n        \"name\": \"Release 1.0\",\n        \"summary\": \"This is the first release.\",\n        \"description\": \"This is the first release of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get all API releases",
							"id": "a3a301fb-e6cb-4f51-8de8-65d2c7892894",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/releases",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"releases"
									]
								},
								"description": "Gets information about all of an API version's releases."
							},
							"response": [
								{
									"id": "211a8c87-d335-4d37-87d9-1c578c099e1d",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"releases\": [\n        {\n            \"id\": \"07d940bf-40fc-4acd-a11e-be6769894af0\",\n            \"name\": \"Release 2.0\",\n            \"description\": \"This is the second release of the Test API.\",\n            \"visibility\": \"private\"\n        },\n        {\n            \"id\": \"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2\",\n            \"name\": \"Release 1.0\",\n            \"description\": \"This is the first release of the Test API. For more information, read the documentation.\",\n            \"visibility\": \"public\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create an API release",
							"id": "edc5ef26-895f-400d-9cc1-6f42850f9960",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"release\": {\n        \"name\": \"{{apiReleaseName}}\",\n        \"summary\": \"{{apiReleaseSummary}}\",\n        \"description\": \"{{apiReleaseDescription}}\",\n        \"visibility\": \"{{apiReleaseVisibility}}\",\n        \"gitTag\": \"{{apiReleaseGitTag}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/releases",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"releases"
									]
								},
								"description": "Creates a new API version release. Include the following properties in the `release` object:\n\n*   `name` — A **string** value that contains the release name.\n*   `visibility` — A **string** value that contains the release's visibility. One of:\n    *   `private` — The release is private.\n    *   `public` — The release is public.\n\nYou can include the following optional properties:\n\n*   `summary` — A **string** value that contains the release's summary.\n*   `description` — A **string** value that contains the release's description.\n*   `gitTag` — A **string** value that contains a valid [Git tag](https://docs.github.com/en/rest/git/tags) ID. The tag must exist in the API's connected Git repository."
							},
							"response": [
								{
									"id": "6841ddf5-a1b0-442a-b5e0-62245121ec8f",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"release\": {\n        \"id\": \"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2\",\n        \"name\": \"Release 1.0\",\n        \"summary\": \"This is the first release.\",\n        \"description\": \"This is the first release of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\"\n    }\n}"
								},
								{
									"id": "1bd3fc9f-2442-422e-9f32-715a1a9dac5d",
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"release\": {\n        \"id\": \"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2\",\n        \"name\": \"Release 1.0\",\n        \"summary\": \"This is the first release.\",\n        \"description\": \"This is the first release of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\",\n        \"gitTag\": \"release\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"apiRepositoryNotFoundError\",\n        \"message\": \"This API version is not linked to a repository\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update an API release",
							"id": "4a4a4a88-4a04-4e84-9ba6-897d8e207197",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"release\": {\n        \"name\": \"{{apiReleaseName}}\",\n        \"summary\": \"{{apiReleaseSummary}}\",\n        \"description\": \"{{apiReleaseDescription}}\",\n        \"visibility\": \"{{apiReleaseVisibility}}\",\n        \"gitTag\": \"{{apiReleaseGitTag}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/releases/{{apiReleaseId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"releases",
										"{{apiReleaseId}}"
									]
								},
								"description": "Updates an API version's release. Include at least one of the following properties in the `release` object:\n\n*   `name` — A **string** value that contains the release name.\n*   `visibility` — A **string** value that contains the release's visibility. One of:\n    *   `private` — The release is private.\n    *   `public` — The release is public.\n*   `summary` — A **string** value that contains the release's summary.\n*   `description` — A **string** value that contains the release's description.\n*   `gitTag` — A **string** value that contains a valid [Git tag](https://docs.github.com/en/rest/git/tags) ID. The tag must exist in the API's connected Git repository."
							},
							"response": [
								{
									"id": "74c195fc-6853-4e1a-b4f4-c34e68ad72bd",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases/8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases",
												"8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"release\": {\n        \"id\": \"8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2\",\n        \"name\": \"Release 1.5\",\n        \"summary\": \"This is the first public release update.\",\n        \"description\": \"This is the first release update of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\",\n        \"gitTag\": \"Test\"\n    }\n}"
								},
								{
									"id": "eb309966-7771-4558-976c-f5c0740f16cc",
									"name": "Bad Request",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"release\": {\n        \"name\": \"Release 1.5\",\n        \"summary\": \"This is the first public release update.\",\n        \"description\": \"This is the first release update of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\",\n        \"gitTag\": \"Test\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases/8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases",
												"8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"release\": {\n        \"id\": \"8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2\",\n        \"name\": \"Release 1.5\",\n        \"summary\": \"This is the first public release update.\",\n        \"description\": \"This is the first release update of the Test API. For more information, read the documentation.\",\n        \"visibility\": \"public\",\n        \"gitTag\": \"Test\"\n    }\n}"
								}
							]
						},
						{
							"name": "Delete an API release",
							"id": "cc9ecee3-8e36-4a9d-b004-1f7a10979b59",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{postman-API-key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/releases/{{apiReleaseId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"versions",
										"{{apiVersionId}}",
										"releases",
										"{{apiReleaseId}}"
									]
								},
								"description": "Deletes an API version's release."
							},
							"response": [
								{
									"id": "3bd624dd-d7ef-45a7-a3e8-6f06780d7f31",
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases/3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases",
												"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"release\": {\n        \"id\": \"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2\"\n    }\n}"
								},
								{
									"id": "001363cc-f4b6-4da8-9719-01b16f847dc8",
									"name": "Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/apis/387c2863-6ee3-4a56-8210-225f774edade/versions/a9879d02-74bf-425a-bbec-6d27aa135507/releases/3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"387c2863-6ee3-4a56-8210-225f774edade",
												"versions",
												"a9879d02-74bf-425a-bbec-6d27aa135507",
												"releases",
												"3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the release you are looking for\"\n    }\n}"
								}
							]
						}
					],
					"id": "43239a3c-1bd8-4b0b-924f-df5612895dcc",
					"description": "The API release endpoints let you manage your API's releases."
				},
				{
					"name": "Get all APIs",
					"id": "9a398709-9e34-4291-b562-1c95e2f4122a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. Return only APIs that are inside the given workspace.",
									"disabled": true
								},
								{
									"key": "since",
									"value": "{{since}}",
									"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format.",
									"disabled": true
								},
								{
									"key": "until",
									"value": "{{until}}",
									"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format.",
									"disabled": true
								},
								{
									"key": "createdBy",
									"value": "{{createdBy}}",
									"description": "Optional. Return only APIs created by the given user ID.",
									"disabled": true
								},
								{
									"key": "updatedBy",
									"value": "{{updatedBy}}",
									"description": "Optional. Return only APIs updated by the given user ID.",
									"disabled": true
								},
								{
									"key": "isPublic",
									"value": "{{isPublic}}",
									"description": "Optional. If true, return only public APIs; if false, return only private APIs.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{name}}",
									"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "summary",
									"value": "{{summary}}",
									"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "description",
									"value": "{{description}}",
									"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "{{sort}}",
									"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter.",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "{{direction}}",
									"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
									"disabled": true
								}
							]
						},
						"description": "Gets information about all APIs."
					},
					"response": [
						{
							"id": "3cf82333-66fc-446b-a90c-008fd5e788c8",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. Return only APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Optional. Return only APIs created by the given user ID.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Optional. Return only APIs updated by the given user ID.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "{{isPublic}}",
											"description": "Optional. If true, return only public APIs; if false, return only private APIs.",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 12 Jul 2022 16:39:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=915b2bd230311a7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=108d09101d76e02a"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "400"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "399"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1657644009"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"apis\": [\n        {\n            \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n            \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n            \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n            \"name\": \"Test API\",\n            \"summary\": \"Test API.\",\n            \"description\": \"This is a test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-22T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-22T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public API A\",\n            \"summary\": \"Public Test A.\",\n            \"description\": \"This is a public test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-30T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-30T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public Test API B\",\n            \"summary\": \"Public Test B\",\n            \"description\": \"This is another public test API.\",\n            \"createdBy\": \"87654321\",\n            \"updatedBy\": \"87654321\",\n            \"isPublic\": false\n        }\n    ]\n}"
						},
						{
							"id": "2133e548-c17d-430c-aaa1-999fa189768a",
							"name": "Get Public APIs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis?isPublic=true",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. Return only APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Optional. Return only APIs created by the given user ID.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Optional. Return only APIs updated by the given user ID.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "true",
											"description": "Optional. If true, return only public APIs; if false, return only private APIs."
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 12 Jul 2022 16:39:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=915b2bd230311a7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=108d09101d76e02a"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "400"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "399"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1657644009"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"apis\": [\n        {\n            \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n            \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n            \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n            \"name\": \"Test API\",\n            \"summary\": \"Test API.\",\n            \"description\": \"This is a test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-22T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-22T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public API A\",\n            \"summary\": \"Public Test A.\",\n            \"description\": \"This is a public test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        }\n    ]\n}"
						},
						{
							"id": "33902cf2-6be8-43a6-85c7-9c09bf6940e9",
							"name": "Get APIs in a Date Range",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis?since=2022-06-01T00:00:00.000Z&until=2022-06-15T00:00:00.000Z",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. Return only APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "2022-06-01T00:00:00.000Z",
											"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format."
										},
										{
											"key": "until",
											"value": "2022-06-15T00:00:00.000Z",
											"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format."
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Optional. Return only APIs created by the given user ID.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Optional. Return only APIs updated by the given user ID.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "{{isPublic}}",
											"description": "Optional. If true, return only public APIs; if false, return only private APIs.",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 12 Jul 2022 16:39:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=915b2bd230311a7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=108d09101d76e02a"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "400"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "399"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1657644009"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"apis\": [\n        {\n            \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n            \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n            \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n            \"name\": \"Test API\",\n            \"summary\": \"Test API.\",\n            \"description\": \"This is a test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        }\n    ]\n}"
						},
						{
							"id": "024bb6d5-8492-491c-ab4c-4861cca55c8e",
							"name": "Filter APIs by Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis?name=Public",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. Return only APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Optional. Return only APIs created by the given user ID.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Optional. Return only APIs updated by the given user ID.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "{{isPublic}}",
											"description": "Optional. If true, return only public APIs; if false, return only private APIs.",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Public",
											"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive."
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 12 Jul 2022 16:39:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=915b2bd230311a7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=108d09101d76e02a"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "400"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "399"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1657644009"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"apis\": [\n        {\n            \"createdAt\": \"2022-06-22T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-22T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public API A\",\n            \"summary\": \"Public Test A.\",\n            \"description\": \"This is a public test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-30T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-30T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public Test API B\",\n            \"summary\": \"Public Test B\",\n            \"description\": \"This is another public test API.\",\n            \"createdBy\": \"87654321\",\n            \"updatedBy\": \"87654321\",\n            \"isPublic\": false\n        }\n    ]\n}"
						},
						{
							"id": "5574465f-c2c4-4d8d-927a-827aba6a561e",
							"name": "Sort by updatedAt",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis?sort=updatedAt",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. Return only APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Optional. Return only APIs updated at and after this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Optional. Return only APIs updated at and before this time, in ISO 8601 UTC format.",
											"disabled": true
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Optional. Return only APIs created by the given user ID.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Optional. Return only APIs updated by the given user ID.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "{{isPublic}}",
											"description": "Optional. If true, return only public APIs; if false, return only private APIs.",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Optional. Return only APIs whose name includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Optional. Return only APIs whose summary includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Optional. Return only APIs whose description includes the given value. Matching is not case-sensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "updatedAt",
											"description": "Optional. Sort the results by the given value.\n\nIf you use this query parameter, you must also use the `direction` parameter."
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "Optional. Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.\n\nIf you use this query parameter, you must also use the \"sort\" parameter.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 12 Jul 2022 16:39:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "120"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=915b2bd230311a7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=108d09101d76e02a"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "400"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "399"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1657644009"
								},
								{
									"key": "ETag",
									"value": "W/\"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"apis\": [\n        {\n            \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n            \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n            \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n            \"name\": \"Test API\",\n            \"summary\": \"Test API.\",\n            \"description\": \"This is a test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-22T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-22T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public API A\",\n            \"summary\": \"Public Test A.\",\n            \"description\": \"This is a public test API.\",\n            \"createdBy\": \"12345678\",\n            \"updatedBy\": \"12345678\",\n            \"isPublic\": true\n        },\n        {\n            \"createdAt\": \"2022-06-30T16:51:28.000Z\",\n            \"updatedAt\": \"2022-06-30T16:51:28.000Z\",\n            \"id\": \"69ce25ea-2914-426e-ae34-af558b6777e6\",\n            \"name\": \"Public Test API B\",\n            \"summary\": \"Public Test B\",\n            \"description\": \"This is another public test API.\",\n            \"createdBy\": \"87654321\",\n            \"updatedBy\": \"87654321\",\n            \"isPublic\": false\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Create an API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a374a1db-328e-48a9-934b-ce22272f3816"
							}
						}
					],
					"id": "44d1c74b-011a-46ff-8a1a-e81d9993fc27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"api\": {\n        \"name\": \"{{apiName}}\",\n        \"summary\": \"{{apiSummary}}\",\n        \"description\": \"{{apiDescription}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. The workspace ID in which to create the API.\n\nIf you do not use this parameter, the system creates the API in the \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Creates an API. Include the following properties in the `api` object:\n\n*   `name` — A **string** value that contains the API's name.\n    \n\nYou can include the following optional properties:\n\n*   `summary` — A **string** value that contains a summary of the API.\n*   `description` — A **string** value that contains the description of the API."
					},
					"response": [
						{
							"id": "78de6d70-a2b1-4ca9-8ef8-bc6b2e5d05ff",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to create the API.\n\nIf you do not use this parameter, the system creates the API in the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"api\": {\n        \"createdAt\": \"2022-06-29T20:46:58.000Z\",\n        \"updatedAt\": \"2022-06-29T20:46:58.000Z\",\n        \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n        \"name\": \"Test API\",\n        \"summary\": \"Test API Schema\",\n        \"description\": \"This is a test API.\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\"\n    }\n}"
						},
						{
							"id": "ef47c3e5-4e77-415a-a82e-e5c3be5dffea",
							"name": "Create API in a Workspace",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"api\": {\n        \"name\": \"Test API\",\n        \"summary\": \"Test API Schema\",\n        \"description\": \"This is a test API.\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to create the API.\n\nIf you do not use this parameter, the system creates the API in the \"My Workspace\" workspace."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"api\": {\n        \"createdAt\": \"2022-06-29T20:46:58.000Z\",\n        \"updatedAt\": \"2022-06-29T20:46:58.000Z\",\n        \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n        \"name\": \"Test API\",\n        \"summary\": \"Test API Schema\",\n        \"description\": \"This is a test API.\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\"\n    }\n}"
						},
						{
							"id": "5f13d555-a210-4c22-8668-0b2912199ec1",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"api\": {\n        \"summary\": \"Test API Schema\",\n        \"description\": \"This is a test API.\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. The workspace ID in which to create the API.\n\nIf you do not use this parameter, the system creates the API in the \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"paramMissingError\",\n        \"message\": \"Parameter is missing in the request.\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get an API",
					"id": "e8c355c4-33bc-4207-bca7-09a9a6f90c23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{apiId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{apiId}}"
							]
						},
						"description": "Gets information about an API."
					},
					"response": [
						{
							"id": "d6376cbd-0088-43d7-86a8-be87701cb17c",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"api\": {\n        \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n        \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n        \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n        \"name\": \"Test API\",\n        \"summary\": \"Test API.\",\n        \"description\": \"This is a test API.\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"team\": \"1234\",\n        \"isPublic\": true,\n        \"versions\": [\n            {\n                \"id\": \"a9879d02-74bf-425a-bbec-6d27aa135507\",\n                \"name\": \"v1\",\n                \"schemas\": [\n                    {\n                        \"id\": \"16bb367e-fafb-4ef3-933b-ee3d971866fb\",\n                        \"type\": \"openapi3\",\n                        \"language\": \"json\",\n                        \"content\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Test API\\\"\\n  },\\n  \\\"servers\\\": [\\n    {\\n      \\\"url\\\": \\\"http://locahost:3000\\\"\\n    }\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/user\\\": {\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"List all users\\\",\\n        \\\"operationId\\\": \\\"listUser\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"required\\\": true,\\n            \\\"description\\\": \\\"The user's ID.\\\",\\n            \\\"example\\\": 1234,\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"integer\\\",\\n              \\\"format\\\": \\\"int32\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"Information about the user.\\\",\\n            \\\"headers\\\": {\\n              \\\"x-next\\\": {\\n                \\\"description\\\": \\\"A link to the next page of responses.\\\",\\n                \\\"schema\\\": {\\n                  \\\"type\\\": \\\"string\\\"\\n                }\\n              }\\n            },\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/User\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"User\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"tag\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"code\\\",\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"code\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int32\\\"\\n          },\\n          \\\"message\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n                    }\n                ],\n                \"relations\": [\n                    {\n                        \"id\": \"66b88a55-9e52-41b0-8577-7b6798ff5bee\",\n                        \"model\": \"schema\",\n                        \"type\": \"schema\",\n                        \"modelId\": \"5a07383e-e604-4793-a48a-b6bb3019abc6\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						},
						{
							"id": "adaddc84-24eb-46f3-b70e-8318ab49caa7",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update an API",
					"id": "cf13b9f5-552d-443a-af2e-0dca3a6a8321",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"api\": {\n\t\t\"name\": \"{{apiName}}\",\n        \"summary\": \"{{apiSummary}}\",\n\t\t\"description\": \"{{apiDescription}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{apiId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{apiId}}"
							]
						},
						"description": "Updates an API. Include at least one of the following properties in the `api` object:\n\n*   `name` — A **string** value that contains the API's name.\n*   `summary` — A **string** value that contains a summary of the API.\n*   `description` — A **string** value that contains the description of the API."
					},
					"response": [
						{
							"id": "df33786c-7271-4442-9d00-4739ab26a4dd",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"api\": {\n        \"createdAt\": \"2022-06-29T20:46:58.000Z\",\n        \"updatedAt\": \"2022-06-29T20:46:58.000Z\",\n        \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n        \"name\": \"Test API A\",\n        \"summary\": \"Test API A Schema\",\n        \"description\": \"This is Test API A.\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\"\n    }\n}"
						},
						{
							"id": "68abda5c-27f8-4a1e-841b-9ec92d4bed97",
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"api\": {\n        \"name\": \"Test API A\",\n        \"summary\": \"Test API A Schema\",\n        \"description\": \"This is Test API A.\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete an API",
					"id": "9d121c4a-1302-44f1-9358-f910e34ca53a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{apiId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{apiId}}"
							]
						},
						"description": "Deletes an API."
					},
					"response": [
						{
							"id": "d89c10b5-42e8-4c98-98fb-d0f0964347ca",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"api\": {\n        \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\"\n    }\n}"
						},
						{
							"id": "09977d01-826e-4e37-8f84-1253bdc4f806",
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"5360b75f-447e-467c-9299-12fd6c92450d"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the API you are looking for\"\n    }\n}"
						}
					]
				}
			],
			"id": "3bc4b372-a06f-4434-8e83-7309eac68b24",
			"description": "The `/apis` endpoints let you manage your APIs."
		},
		{
			"name": "Webhooks",
			"item": [
				{
					"name": "Create a webhook",
					"id": "abdc6d0d-68f9-4a8e-8d57-018cb748f50a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"webhook\":{\n        \"name\": \"{{webhookName}}\",\n        \"collection\": \"{{collectionUid}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/webhooks",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"webhooks"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the webhook.\n\nIf you do not include this query parameter, the system creates the webhook in your \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Creates a webhook that triggers a collection with a custom payload. You can get the webhook's URL from the `webhookUrl` property in the endpoint's response.\n\nInclude the following properties in a `webhook` object in the request body:\n\n*   `name` — The webhook's name. On success, the system creates a new monitor with this name in the **Monitors** tab.\n*   `collection` — The collection UID to trigger when calling this webhook."
					},
					"response": [
						{
							"id": "d10441a5-ce82-4351-b02f-c573212477f3",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-workspace-id",
										"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"webhook\":{\n        \"name\": \"Test Webhook\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/webhooks?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"webhooks"
									],
									"query": [
										{
											"key": "workspace",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"description": "Optional. A workspace ID in which to create the webhook.\n\nIf you do not include this query parameter, the system creates the webhook in your \"My Workspace\" workspace."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"webhook\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Test Webhook\",\n        \"collection\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"webhookUrl\": \"https://newman-api.getpostman.com/run/12345678/267a6e99-b6da-407c-a96f-03be2d6282fb\",\n        \"uid\": \"12345678-1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\"\n    }\n}"
						}
					]
				}
			],
			"id": "e300ce98-0c51-4124-926a-7101e9970c1e",
			"description": "The `/webhooks` endpoints let you manage [custom webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/)."
		},
		{
			"name": "SCIM 2.0 - Identity",
			"item": [
				{
					"name": "User Provisioning",
					"item": [
						{
							"name": "Fetch User Resource",
							"id": "030493a1-0ddc-4805-8970-ff9f22fe72f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/scim/v2/Users/{{id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"scim",
										"v2",
										"Users",
										"{{id}}"
									]
								},
								"description": "Fetches an individual Postman team member's information."
							},
							"response": [
								{
									"id": "432476db-d57d-4d6d-bdd2-f7808e437069",
									"name": "200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"userName\": \"test.user@okta.local\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"active\": true,\n    \"meta\": {\n        \"resourceType\": \"User\",\n        \"created\": \"2021-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "b9c53288-caff-42f3-991a-f80b0fcbd29a",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "f0aca691-3d00-4860-a8e2-ef7014a301f0",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "216668ad-3fcf-4b6a-b772-4179955904a1",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "a5aba93a-b912-46c9-b276-a33b24da50cc",
									"name": "404 - User Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "60a2369d-d995-43b2-b686-8b4f2a780e9f",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 300 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "bbceff88-63a3-4d00-8048-f57d72f45524",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to fetch information about this team member.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Fetch All User Resource",
							"id": "90e8de00-9473-45fc-b96d-131b20946e82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/scim/v2/Users",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"scim",
										"v2",
										"Users"
									],
									"query": [
										{
											"key": "startIndex",
											"value": "1",
											"disabled": true
										},
										{
											"key": "count",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "userName eq 'test%40domain.com'",
											"disabled": true
										}
									]
								},
								"description": "Fetches information on all Postman team members. You can fetch information for a particular user with filters.\n\nNote: By default, this endpoint will return a list of hundred users. To overwrite the default setting, update the 'startIndex=1&count=100' value in the request."
							},
							"response": [
								{
									"id": "4f2d6d9d-68f6-453e-8075-63f4d134c4d1",
									"name": "200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 1000,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 2,\n    \"Resources\": [{\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\n        ],\n        \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"userName\": \"{{userEmail}}\",\n        \"name\": {\n            \"givenName\": \"Test\",\n            \"familyName\": \"User\"\n        },\n        \"externalId\": \"23123123\",\n        \"active\": true,\n        \"meta\": {\n            \"resourceType\": \"User\",\n            \"created\": \"2021-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n        }\n    },\n    {\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\n        ],\n        \"id\": \"123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"userName\": \"test.user12@okta.local\",\n        \"name\": {\n            \"givenName\": \"Test\",\n            \"familyName\": \"User\"\n        },\n        \"externalId\": \"233133423\",\n        \"active\": true,\n        \"meta\": {\n            \"resourceType\": \"User\",\n            \"created\": \"2021-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n        }\n    }]\n}"
								},
								{
									"id": "02657111-36f4-4120-a2af-4385e9cfa434",
									"name": "200 - Using filter",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=2&filter=userName eq \"test%40domain.com\"",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "2"
												},
												{
													"key": "filter",
													"value": "userName eq \"test%40domain.com\"",
													"description": "Enter URL encoded email"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 1000,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 1,\n    \"Resources\": [{\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\n        ],\n        \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"userName\": \"{{userEmail}}\",\n        \"name\": {\n            \"givenName\": \"Test\",\n            \"familyName\": \"User\"\n        },\n        \"externalId\": \"23123123\",\n        \"active\": true,\n        \"meta\": {\n            \"resourceType\": \"User\",\n            \"created\": \"2021-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n        }\n    }]\n}"
								},
								{
									"id": "e58f0b60-0283-450a-a872-e5103f73fb58",
									"name": "200 No results",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 0,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 0,\n    \"Resources\": []\n}"
								},
								{
									"id": "c5a78403-1bee-4422-9c7f-f5cbd07cd5e5",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "9e435780-f5c3-4a45-a9cd-ea6d182ef7ae",
									"name": "400 - Using incorrect/unsupported filter",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=2&filter=username ne \"test%40domain.com\"",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "2"
												},
												{
													"key": "filter",
													"value": "username ne \"test%40domain.com\"",
													"description": "Enter URL encoded email"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"You’ve used filter(s) that Postman doesn’t support.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "82475661-6b93-4758-9c4d-1a7c847b2e93",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "b51b4f7e-b69d-4280-be13-943ade476be0",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"TYour API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "9d3783d9-dd6d-4836-8718-86d7e1f15f39",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1",
													"disabled": true
												},
												{
													"key": "count",
													"value": "10",
													"disabled": true
												}
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 300 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "8405e0e4-61c1-43cc-973d-62f4756afbb3",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t fetch members of the team.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Create User",
							"id": "25b6a90b-bc6f-42d6-9a0a-bbe7b3132917",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/scim/v2/Users",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"scim",
										"v2",
										"Users"
									]
								},
								"description": "Creates a new user account in Postman, adds the user to your organization's Postman team, and activates the user to authenticate into your Postman team, provided an account with the same email ID does not already exist in Postman. The newly added user will have the `developer` role in Postman by default. You can later [update user roles in Postman](/docs/administration/managing-your-team/managing-your-team/#managing-roles).\n\nIf an account with the same email ID does exist, an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to the user. Once the user accepts the invite, they will be added to your team."
							},
							"response": [
								{
									"id": "32b317d4-d54f-4331-bd9e-fb188d5cf888",
									"name": "201 - User Creation Successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"userName\": \"testUser@postman.local\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"active\": true,\n    \"meta\": {\n        \"resourceType\": \"User\",\n        \"created\": \"2021-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "296e43b4-fd31-4b65-953c-0e5d70008143",
									"name": "400 - Invalid request body",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {},\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"invalidSyntax\",\n    \"detail\": \"The request body seems to be incomplete or have unsupported characters.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "518597b9-5a90-41ff-ba39-8c05632072b1",
									"name": "400 - Not Enterprise",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {},\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Only Postman teams on the Enterprise plan can use SCIM provisioning. Upgrade your plan.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "9118d80a-2687-4856-8c28-dfd1135239b8",
									"name": "400 - No slots",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {},\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"No slots available on your Postman team. Purchase or free up slots to invite more members. For help, contact Team Admins or members with a Billing role.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "ce7f3f8d-e0e4-4add-b8f8-4f0629970e4e",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {},\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "cc1f4958-8bd7-4db6-ac32-b626ba75d1a5",
									"name": "401 - Invalid API key",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "73e03ed9-e101-420c-b442-a858bbb2ab31",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {},\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "3fcba5d7-4191-45f2-aa5d-c2f2ec582aef",
									"name": "409 - User already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"uniqueness\",\n    \"detail\": \"This person is already a member of the team.\",\n    \"status\": \"409\"\n}"
								},
								{
									"id": "53f207e9-e1e3-4f78-a366-75bbee496804",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "026888db-6985-4602-81b9-23e2436b9901",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to add members to the team. Try again — it should work next time around.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Update User Information",
							"id": "bc2761ed-6028-49bc-a197-33688ccc4643",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/scim/v2/Users/{{id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"scim",
										"v2",
										"Users",
										"{{id}}"
									]
								},
								"description": "Updates a user’s first and last name in Postman. \n\n> Only updates made to the user’s given and family name via the SCIM API will be pushed to Postman. No other user attributes can be updated in Postman using the SCIM API."
							},
							"response": [
								{
									"id": "6c38e0de-43b5-4de5-a5e5-dddc56dc078b",
									"name": "200",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"userName\": \"test.user@okta.local\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"active\": true,\n    \"meta\": {\n        \"resourceType\": \"User\",\n        \"created\": \"2021-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "83261f65-059c-40d4-ae64-4c4ca64ba56e",
									"name": "400 - Can't update username",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t update this team member’s username. Try again — it should work next time around.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "b7bc4352-5f89-40af-ab91-0741f3b05145",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "a445edbb-ba64-4418-986d-8bfe15701540",
									"name": "401 - Invalid API key",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "0b551672-e707-436a-913d-92caeb3cfb23",
									"name": "403 - Admin Team Mismatch",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "365b2b9a-dc03-481a-a407-122f06c20968",
									"name": "400 - Invalid payload",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"invalidSyntax\",\n    \"detail\": \"The request body seems to be incomplete or have unsupported characters.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "a3ae462a-a5c3-4551-b956-4b348191930b",
									"name": "403 - Admin action not allowed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"The admin is not allowed to perform this action.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "7bf3df14-c815-4ecf-9a5f-c554ae298a62",
									"name": "403 - User not in Team",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "f1a8c9a1-141e-4966-bd67-16cd2a79a129",
									"name": "404 - User Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "0b7814b6-39dd-46b7-8a9b-55774496ec92",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "385dc74e-8401-4753-a462-e4dd10a05e4f",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"emails\": [{\n        \"primary\": true,\n        \"value\": \"{{userEmail}}\",\n        \"type\": \"work\"\n    }],\n    \"displayName\": \"Test User\",\n    \"locale\": \"en-US\",\n    \"groups\": [],\n    \"active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t update this team member’s information. Try again — it should work next time around.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Update User Information",
							"id": "c1f79bd3-ab9c-4782-b6ed-145df9794a72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/scim/v2/Users/{{id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"scim",
										"v2",
										"Users",
										"{{id}}"
									]
								},
								"description": "Updates user state in Postman:\n  * **Activate User**: Creates a new user on your Postman team, if one does not already exist, and activates the user to authenticate into your Postman team.\n  * **Deactivate User**: Removes a user from your Postman team and deactivates their account, blocking the account from authenticating into Postman.\n  > The user account and the data corresponding to it will not be deleted. To permanently delete the user account and their data, [contact Postman support](https://www.postman.com/support/).\n  * **Reactivate Users**: Reactivates an existing deactivated user by unblocking the account's authentication into Postman and adds the account back on to your Postman team."
							},
							"response": [
								{
									"id": "b7799d7a-d095-4ab2-a2f4-b631e70d7ed0",
									"name": "200",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"userName\": \"{{userEmail}}\",\n    \"name\": {\n        \"givenName\": \"Test\",\n        \"familyName\": \"User\"\n    },\n    \"externalId\": \"23123123\",\n    \"active\": false,\n    \"meta\": {\n        \"resourceType\": \"User\",\n        \"created\": \"2021-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2021-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "561bedc0-07b2-4724-83ef-439e24624a3a",
									"name": "400 - Invalid payload",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"invalidSyntax\",\n    \"detail\": \"You’ve used operation that Postman doesn’t support.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "c1abf85e-47da-489b-b077-88bb9bf376a5",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Team doesn't exist.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "d0b5f4b5-c45d-48a7-8323-ae13fd836b60",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "32e906c1-b2df-4adb-8902-6d865749c2db",
									"name": "403 - User not in team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "d891d57d-bf41-46dd-8600-961d12a68509",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "30796e8e-997e-4ec7-a919-3e2d0d9c7d4e",
									"name": "404 - User Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "7ebceef0-0409-41ae-8ac1-268f08279f59",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "5cdd2ba8-0589-4965-bf5c-ace3d662153c",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"active\": false\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Users/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t update this team member’s information. Try again — it should work next time around.\",\n    \"status\": \"500\"\n}"
								}
							]
						}
					],
					"id": "33b549c1-1e1a-4424-ac31-388dc85d34bd",
					"description": "The following SCIM provisioning features are supported:\n\n* **Fetch User Resource**: Fetches individual Postman team member's information.\n\n* **Fetch All User Resource**: Fetches information on all Postman team members. You can fetch information for a particular user using filters.\n\n* **Create User**: Creates a new user account in Postman, adds the account to your organization's Postman team, and activates authentication for the user, provided an account with the same email ID that does not already exist in Postman. If an account with the same email ID does exist, an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to the user. Once the user accepts the email invite, they will be added to your team.\n\n  > The newly added user will have the `developer` role in Postman by default. You can later [update account roles in Postman](/docs/administration/managing-your-team/managing-your-team/#managing-roles).\n\n* **Update User Information**: \n  * **Update User Attributes**: Updates a user’s first and last name in Postman.\n  * **Activate User**: Creates a new user on your Postman team, if one does not already exist, and activates the user to authenticate into your Postman team.\n  * **Deactivate User**: Removes a user from your Postman team and deactivates their account, blocking the account from authenticating into Postman.\n  > The user account and the data corresponding to it will not be deleted. To permanently delete the user account and their data, [contact Postman support](https://www.postman.com/support/).\n  * **Reactivate User**: Reactivates an existing deactivated user by unblocking the account from authenticating into Postman and adds the user back in to your Postman team.\n\nThe base URL for all calls to the SCIM 2.0 API is `https://api.getpostman.com/scim/v2/`.\n\n## Team Level Rate Limits\nFor your organization’s Postman team, Postman applies per minute rate limits across all SCIM API endpoints to ensure you have the best experience while using Postman’s SCIM API.\n\n| Endpoint set                  | Limit (requests per minute)  |\n|:-----------------------------:|:----------------------------:|\n| Writes: POST, PUT, PATCH      | 180                          |\n| Reads: GET                    | 300                          |\n\n## User Attributes\nUser attributes are the information linked to a user’s account. This includes details like name, username, email, password, profile and cover picture, etc. \n\nOnly updates made to the user’s given and family name via the SCIM API will be pushed to Postman. No other user attributes can be updated in Postman using the SCIM API.\n\n| Postman’s Profile Field | SCIM Attribute          | Attribute Type | Required |\n|:-----------------------:|:-----------------------:|:--------------:|:-------: |\n| Email                   | userName                | Singular       | True     |\n| Name                    | {givenName, familyName} | Singular       | True     |\n\n\n## SCIM Provisioning Limitations\n* Users cannot be permanently deleted from Postman via the SCIM API, they can only be deactivated.\n* New users created with the SCIM API will also be created in Postman and added to the Postman team corresponding to the organization, provided an account with the same email ID does not already exist in Postman. If an account with the same email ID does exist, an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to the user. Once the user accepts the email invite, they will be added to your team.\n* The newly added user will have the developer role in Postman by default. Postman user roles cannot be updated via the SCIM API, and you must [manage roles in Postman](/docs/administration/managing-your-team/managing-your-team/#managing-roles).\n* The SCIM API is rate limited. If your requests are being limited, an HTTP: 429 error will be returned.\n* Only updates made to the user’s given and family name through SCIM API will be pushed to Postman. No other user attributes can be updated in Postman using the SCIM API.\n* Only one custom SSO method should be enabled for your Postman team to be able to generate a SCIM API key and use the SCIM feature."
				},
				{
					"name": "Group Provisioning",
					"item": [
						{
							"name": "Fetch Group Resource",
							"id": "331514f1-5db1-42b8-8a1e-66bac1095f19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}"
									}
								],
								"url": {
									"raw": "{{url}}/Groups/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"Groups",
										"{{id}}"
									]
								},
								"description": "Fetches information on a Postman group."
							},
							"response": [
								{
									"id": "6799a414-a5a1-4fff-aaad-8af271ba73a4",
									"name": "200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv2\",\n    \"members\":  [{\n        \"value\": \"b1c794f24f4c49f4b5d503a4cb2686ea\",\n        \"display\": \"SCIM 2 Group A\"\n    }],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "cc9c92be-b84a-4ffa-ab60-ad2df2fb9b03",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "1e1a9231-cc6a-49cb-8648-f56e4ecf3981",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "24937958-fd0c-49ac-aea4-887bf44a06e9",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "9198346b-bb89-49ed-b930-65d773dda80e",
									"name": "404 - Group Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This group isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "19d2a280-c1df-4b16-ad55-5209cce8b3a2",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 300 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "0bfb55f0-6894-41d4-99e2-83acad24911a",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to fetch information about this team member.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Fetch All Group Resource",
							"id": "a0b6cbd5-5284-40d4-8d8a-c5654cc75654",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}"
									}
								],
								"url": {
									"raw": "{{url}}/Groups",
									"host": [
										"{{url}}"
									],
									"path": [
										"Groups"
									],
									"query": [
										{
											"key": "startIndex",
											"value": "1",
											"disabled": true
										},
										{
											"key": "count",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "displayName eq \"Test SCIMv2\"",
											"disabled": true
										}
									]
								},
								"description": "Fetches information on all Postman groups."
							},
							"response": [
								{
									"id": "ff8da034-1c63-4999-9b15-037ae2b5173b",
									"name": "200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 1000,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 2,\n    \"Resources\": [{\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n        ],\n        \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"displayName\": \"{{userGroup}}\",\n        \"members\":  [{\n            \"value\": \"b1c794f24f4c49f4b5d503a4cb2686ea\",\n            \"display\": \"SCIM 2 Group A\"\n        }],\n        \"externalId\": \"23123123\",\n        \"meta\": {\n            \"resourceType\": \"Group\",\n            \"created\": \"2022-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n        }\n    },\n    {\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n        ],\n        \"id\": \"123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"displayName\": \"Test SCIMv2 B\",\n        \"members\":  [\n            {\n                \"value\": \"b1c794f24f4c49f4b5d503a4cb2686ea\",\n                \"display\": \"SCIM 2 Group A\"\n            },\n            {\n                \"value\": \"ghc794f24f4c49f4b5d503a4cb2686e90\",\n                \"display\": \"SCIM 2 Group B\"\n            }\n        ],\n        \"externalId\": \"233133424\",\n        \"meta\": {\n            \"resourceType\": \"Group\",\n            \"created\": \"2022-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n        }\n    }]\n}"
								},
								{
									"id": "9e65f2d1-3a2e-419b-a765-5411d589794e",
									"name": "200 - Using filter",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Users?startIndex=1&count=2&filter=displayName eq \"Test SCIMv2\"",
											"host": [
												"{{url}}"
											],
											"path": [
												"Users"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "2"
												},
												{
													"key": "filter",
													"value": "displayName eq \"Test SCIMv2\"",
													"description": "Enter URL encoded email"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 1000,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 1,\n     \"Resources\": [{\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n        ],\n        \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n        \"displayName\": \"Test SCIMv2\",\n        \"members\":  [{\n            \"value\": \"b1c794f24f4c49f4b5d503a4cb2686ea\",\n            \"display\": \"SCIM 2 Group A\"\n        }],\n        \"externalId\": \"23123123\",\n        \"meta\": {\n            \"resourceType\": \"Group\",\n            \"created\": \"2022-02-22T04:24:13.000Z\",\n            \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n        }\n    }]\n}"
								},
								{
									"id": "8384cdcd-2915-4bf0-b12e-68d7770a73a0",
									"name": "200 No results",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n    \"totalResults\": 0,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 0,\n    \"Resources\": []\n}"
								},
								{
									"id": "ad56b962-8ebf-4381-8fdf-54514f8da994",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "e1230457-be1b-440b-885a-6868ad7c7aee",
									"name": "400 - Using incorrect/unsupported filter",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=2&filter=displayName ne \"Test SCIMv2\"",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "2"
												},
												{
													"key": "filter",
													"value": "displayName ne \"Test SCIMv2\"",
													"description": "Enter URL encoded email"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"You’ve used filter(s) that Postman doesn’t support.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "af51c533-0578-4665-ae3a-1cc43a5db8db",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "df4e8074-1195-4c03-965e-afbcdd279b64",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "c91d2139-1300-4bbf-815e-5bc21ef10787",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1",
													"disabled": true
												},
												{
													"key": "count",
													"value": "10",
													"disabled": true
												}
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 300 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "9949698a-4294-4702-a450-f00594de0383",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups?startIndex=1&count=100",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t fetch members of the team.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Delete Group Resource",
							"id": "181520d5-df3f-4e5e-a757-fb37304845ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}"
									}
								],
								"url": {
									"raw": "{{url}}/Groups/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"Groups",
										"{{id}}"
									]
								},
								"description": "Deletes a user group in Postman. User accounts that were part of the deleted group are deactivated in Postman.\n\n> User accounts and the data corresponding to them will not be deleted. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/)."
							},
							"response": [
								{
									"id": "59ea8f08-abf0-45a1-a831-13aacd6ae7cb",
									"name": "204",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "4f5adb09-afba-43c8-af90-0f83edb8c1d4",
									"name": "404 - Group Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This group isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "9dc1f73c-2e20-460a-921f-c6c7c5c73d5e",
									"name": "401 - Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "86bcabfd-f849-48b9-b1ef-cd090d39ee2c",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to fetch information about this team member.\",\n    \"status\": \"500\"\n}"
								},
								{
									"id": "db8787fe-18ae-461a-95a3-9c02f1900dc0",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "732435f1-3210-48d8-9d13-726b2be2c271",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "2c7e6621-127d-47a9-951e-f90f505802a5",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{url}}/Groups/{{pubId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"{{pubId}}"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								}
							]
						},
						{
							"name": "Create Group",
							"id": "cb73e819-18e4-4cf5-9a58-87ad45227543",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/Groups",
									"host": [
										"{{url}}"
									],
									"path": [
										"Groups"
									]
								},
								"description": "Creates a new user group in Postman and creates a new account for each group member. Each account is added to your Postman team and authentication is activated for each user. If an existing Postman account uses an email that matches a group member's email ID, an [email invite](https://postman.postman.co/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to that user. Once the user accepts the invite, they'll be added to your team.\n\n> Newly created groups will have the developer role in Postman by default. You can later [update group roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-roles)."
							},
							"response": [
								{
									"id": "dd99600e-217f-4790-8e83-180e1aa82441",
									"name": "201 - Group Creation Successful with out any members",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": {{ userGroup }},\n    \"members\": [],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "92483c00-f723-4115-bb51-0a6a0f224b5a",
									"name": "201 - Group Creation Successful with members",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": [\n        {\n            \"value\" : \"b1c794f24f4c49f4b5d503a4cb2686ea\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": {{ userGroup }},\n    \"members\": [\n        {\n            \"value\": \"b1c794f24f4c49f4b5d503a4cb2686ea\",\n            \"display\": \"SCIM 2 Group A\"\n        }\n    ],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "b4c821ea-e5a0-4592-87ba-843e40cf1266",
									"name": "400 - Invalid request body",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"invalidSyntax\",\n    \"detail\": \"The request body seems to be incomplete or have unsupported characters.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "b37f069d-3d3c-4d53-855b-c07f0f88b26c",
									"name": "400 - Not Enterprise",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Only Postman teams on the Enterprise plan can use SCIM provisioning. Upgrade your plan.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "730ffa21-968f-4aa3-b4e8-f5a4465000af",
									"name": "400 - No slots",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"No slots available on your Postman team. Purchase or free up slots to invite more members. For help, contact Team Admins or members with a Billing role.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "f91305dd-6431-4f32-9099-28c1bc3dc220",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "6f6d43ac-ff1e-47a6-ad7b-f438d7594e00",
									"name": "401 - Invalid API key",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "e82bf715-365e-4258-8c19-a96be83b5b76",
									"name": "403 - Admin team mismatch",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "a5b9f96a-4f98-4104-a5fa-fa43b203cc3a",
									"name": "409 - Group already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"uniqueness\",\n    \"detail\": \"This person is already a member of the team.\",\n    \"status\": \"409\"\n}"
								},
								{
									"id": "dc43c37b-3c26-405e-9cf4-bd508d4b5c6f",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "1c89cad9-546a-4d2f-a977-2e5153252476",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n    \"displayName\": {{ userGroup }},\n    \"members\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to add members to the team. Try again — it should work next time around.\",\n    \"status\": \"500\"\n}"
								}
							]
						},
						{
							"name": "Update Group Information",
							"id": "59a03f00-e102-40f4-b4a4-dd5b1e6063fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": {{id}},\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/Groups/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"Groups",
										"{{id}}"
									]
								},
								"description": "**Update Group Information**:  \n* **Update Group Attributes**: Updates a group's name in Postman.  \n* **Update Group Members**: Adds or removes members from a group in Postman."
							},
							"response": [
								{
									"id": "39e01acb-0b93-4d66-91ac-71feab60c69b",
									"name": "200 -  update display name",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv20\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv20\",\n    \"members\": null,\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "961fb547-c94e-4037-921d-f803f4901c25",
									"name": "200 - add members to team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [\n        {\n          \"op\": \"add\",\n          \"path\": \"members\",\n          \"value\": [{\n              \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n              \"display\": \"test.user@okta.local\"\n        }]\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv20\",\n    \"members\": [\n        {\n            \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n            \"display\": \"test.user@okta.local\"\n        },\n        {\n            \"value\": \"89bb1940b90545759e7f6f887cfb368e\",\n            \"display\": \"test.user2@okta.local\"\n        }\n    ],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "45108f48-66be-4ac0-a61d-a6f591912972",
									"name": "200 - remove members to team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"remove\",\n        \"path\": \"members[value eq \\\"89bb1940b90545759e7f6f887cfb368e\\\"]\"\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv20\",\n    \"members\": [\n        {\n            \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n            \"display\": \"test.user@okta.local\"\n        }\n    ],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "9187ac08-d576-4081-9ab3-a227cea211a2",
									"name": "200 - add and remove members to team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n          \"op\": \"remove\",\n          \"path\": \"members[value eq \\\"89bb1940b90545759e7f6f887cfb368e\\\"]\"\n        },\n        {\n          \"op\": \"add\",\n          \"path\": \"members\",\n          \"value\": [{\n              \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n              \"display\": \"test.user@okta.local\"\n        }]\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv20\",\n    \"members\": [\n        {\n            \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n            \"display\": \"test.user@okta.local\"\n        }\n    ],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "6c38d2c1-5467-47c5-b0d8-def1811f7164",
									"name": "200 - replace members to team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apikey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"members\",\n            \"value\": [\n                {\n                \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n                \"display\": \"test.user@okta.local\"\n                },\n                {\n                \"value\": \"89bb1940b90545759e7f6f887cfb368e\",\n                \"display\": \"test.user2@okta.local\"\n                }\n            ]\n        }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n    ],\n    \"id\": \"405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n    \"displayName\": \"Test SCIMv20\",\n    \"members\": [\n        {\n            \"value\": \"23a35c2723d34c03b4c56443c09e7173\",\n            \"display\": \"test.user@okta.local\"\n        },\n        {\n            \"value\": \"89bb1940b90545759e7f6f887cfb368e\",\n            \"display\": \"test.user2@okta.local\"\n        }\n    ],\n    \"externalId\": \"23123123\",\n    \"meta\": {\n        \"resourceType\": \"Group\",\n        \"created\": \"2022-02-22T04:24:13.000Z\",\n        \"lastModified\": \"2022-02-22T04:24:13.000Z\"\n    }\n}"
								},
								{
									"id": "1f8e70f7-38d3-40e0-8bc4-4daf0b0196c8",
									"name": "400 - Can't update display name",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t update this team member’s username. Try again — it should work next time around.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "aaa319bc-7cfe-4cf6-bef2-f00d4f745500",
									"name": "400 - Invalid team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Postman team doesn’t exist anymore.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "c11f5153-d045-4d4e-b1cd-c8fe4cf3e6e1",
									"name": "401 - Invalid API key",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "invalidApiKey"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Unable to access the team. Check if you have entered a valid API key.\",\n    \"status\": \"401\"\n}"
								},
								{
									"id": "4fbaab2e-af88-4cb8-8da1-2b57b160b633",
									"name": "403 - Admin Team Mismatch",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "71fb6ee8-924e-4199-ad89-a06145cf63c8",
									"name": "400 - Invalid payload",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"scimType\": \"invalidSyntax\",\n    \"detail\": \"The request body seems to be incomplete or have unsupported characters.\",\n    \"status\": \"400\"\n}"
								},
								{
									"id": "54a0da5a-c60b-40c4-a972-09f1a73c041c",
									"name": "403 - Admin action not allowed",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"The admin is not allowed to perform this action.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "fa8d4868-fddc-4007-8888-cea0a458efd3",
									"name": "403 - User not in Team",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This person isn’t a member of the team.\",\n    \"status\": \"403\"\n}"
								},
								{
									"id": "e433a93d-4e45-4af6-ac4b-7dce515a8747",
									"name": "404 - Group Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"This Group isn’t a member of the team.\",\n    \"status\": \"404\"\n}"
								},
								{
									"id": "36f20c69-ac7d-4623-8258-b6c63924f50e",
									"name": "429 - Rate limit exceeded",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"code": 429,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"That’s 180 attempts in less than a minute. Wait for a minute and then try again.\",\n    \"status\": 429\n}"
								},
								{
									"id": "f6b68879-303d-4c71-875e-db98353c50ac",
									"name": "500 - Something went wrong",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{apiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:PutOp\"],\n    \"Operations\": [{\n        \"op\": \"replace\",\n        \"value\": {\n            \"id\": \"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99\",\n            \"displayName\": \"Test SCIMv2\"\n        }\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/Groups/a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99",
											"host": [
												"{{url}}"
											],
											"path": [
												"Groups",
												"a405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "html",
									"header": [],
									"cookie": [],
									"body": "{\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:Error\"\n    ],\n    \"detail\": \"Couldn’t update this team member’s information. Try again — it should work next time around.\",\n    \"status\": \"500\"\n}"
								}
							]
						}
					],
					"id": "addc9801-e693-4400-9ea5-8b7d3202cd60",
					"description": "The following SCIM provisioning features are supported for [user groups](https://learning.postman.com/docs/administration/managing-your-team/user-groups/):\n\n*   **Fetch Group Resource**: Fetches information about a specific Postman group within the team.\n*   **Fetch All Group Resource**: Fetches information about all Postman groups within the team.\n*   **Create Group**: Creates a new user group in Postman and creates a new account for each group member. Each account is added to your Postman team and authentication is activated for each user. If an existing Postman account uses an email that matches a group member's email ID, an [email invite](/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to that user. Once the user accepts the invite, they'll be added to your team.\n    \n    > Newly created groups will have the developer role in Postman by default. You can later [update group roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-roles).\n    \n*   **Delete Group Resource**: Deletes a user group in Postman. User accounts that were part of the deleted group are deactivated in Postman if the app is assigned to the user only via the deleted group.\n    \n    > User accounts and the data corresponding to them will not be deleted. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/).\n    \n*   **Update Group Information**:\n    *   **Update Group Attributes**: Updates a group's name in Postman.\n    *   **Update Group Members**: Adds or removes members from a group in Postman.\n\nThe base URL for all calls to the SCIM 2.0 API is `https://api.getpostman.com/scim/v2/`.\n\n## Team Level Rate Limits\n\nFor your organization’s Postman team, Postman applies per minute rate limits across all SCIM API endpoints to ensure you have the best experience while using Postman’s SCIM API.\n\n| Endpoint set | Limit (requests per minute) |\n| --- | --- |\n| Writes: POST, PATCH, DEL | 180 |\n| Reads: GET | 300 |\n\n## SCIM Provisioning Group Limitations\n\n*   Users cannot be permanently deleted from Postman via the SCIM API, they can only be deactivated. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/).\n*   New users created with the SCIM API will also be created in Postman and added to the Postman team corresponding to the organization, provided an account with the same email ID does not already exist in Postman. If an account with the same email ID does exist, an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to the user. Once the user accepts the email invite, they will be added to your team.\n*   Newly added users and groups will have the developer role in Postman by default. Postman user roles cannot be updated via the SCIM API, and you must [manage user and group roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-roles).\n*   The SCIM API is rate limited. If your requests hit these limits, an HTTP: 429 error will be returned.\n*   Only one custom SSO method should be enabled for your Postman team to be able to generate a SCIM API key and use the SCIM feature."
				},
				{
					"name": "Get ResourceTypes",
					"id": "741aafa1-93f1-47c9-8083-35b78d3bab03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/scim/v2/ResourceTypes",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"scim",
								"v2",
								"ResourceTypes"
							]
						},
						"description": "Returns all the resource types supported by Postman's SCIM API."
					},
					"response": [
						{
							"id": "54e67ded-c024-4eed-b8ed-6f56ef5d843a",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/scim/v2/ResourceTypes",
									"host": [
										"{{url}}"
									],
									"path": [
										"scim",
										"v2",
										"ResourceTypes"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"\n        ],\n        \"id\": \"User\",\n        \"name\": \"User\",\n        \"endpoint\": \"/Users\",\n        \"description\": \"User Account\",\n        \"schema\": \"urn:ietf:params:scim:schemas:core:2.0:User\",\n        \"schemaExtensions\": [\n            {\n                \"schema\": \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\",\n                \"required\": true\n            }\n        ]\n    }\n]"
						}
					]
				},
				{
					"name": "Service Provider Config",
					"id": "7d0a50d2-00f0-493a-be1e-2ad7a2e76402",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/scim/v2/ServiceProviderConfig",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"scim",
								"v2",
								"ServiceProviderConfig"
							]
						},
						"description": "Returns configuration details for Postman's SCIM API, including the list of operations that are supported."
					},
					"response": [
						{
							"id": "795f06b5-9936-421a-87da-f9d9295013b3",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/ServiceProviderConfig",
									"host": [
										"{{url}}"
									],
									"path": [
										"ServiceProviderConfig"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\"\n  ],\n  \"documentationUri\": \"https://learning.postman.com/docs/administration/managing-your-team/configuring-scim\",\n  \"patch\": {\n    \"supported\": true\n  },\n  \"bulk\": {\n    \"supported\": false,\n    \"maxOperations\": 0,\n    \"maxPayloadSize\": 0\n  },\n  \"filter\": {\n    \"supported\": true,\n    \"maxResults\": 100\n  },\n  \"changePassword\": {\n    \"supported\": false\n  },\n  \"sort\": {\n    \"supported\": false\n  },\n  \"etag\": {\n    \"supported\": false\n  },\n  \"authenticationSchemes\": [\n    {\n      \"name\": \"OAuth Bearer Token\",\n      \"description\": \"Authentication scheme using the OAuth Bearer Token Standard\",\n      \"specUri\": \"http://www.rfc-editor.org/info/rfc6750\",\n      \"type\": \"oauthbearertoken\"\n    }\n  ],\n  \"meta\": {\n    \"resourceType\": \"ServiceProviderConfig\",\n    \"location\": \"{{url}}/scim/v2/ServiceProviderConfig\"\n  }\n}"
						}
					]
				}
			],
			"id": "981ec63c-ded7-402b-81e4-4bb6331026a4",
			"description": "Postman supports [SCIM](https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management) (System for Cross-domain Identity Management), which allows you to automate the provisioning of your team. You can deploy Postman at scale across your organization and control access to it with your identity provider.\n\n**Note:**\n\n*   You **must** be a [Postman Team admin](http://learning.getpostman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) to enable SCIM.\n*   SCIM provisioning is only available with a Postman **Enterprise** [pricing plan](https://www.postman.com/pricing).\n    \n\n### Enabling SCIM provisioning in Postman\n\nYou must [configure SSO](https://learning.postman.com/docs/administration/sso/admin-sso/) and [enable SCIM](http://learning.getpostman.com/docs/administration/managing-your-team/configuring-scim/#enabling-scim-provisioning) for your Postman team to use these endpoints.\n\n**Important:**\n\nTo use SCIM, you must have only **one** SSO method configured. If you have more than one SSO method enabled, you **cannot** generate an SCIM API key.\n\n### SCIM provisioning limitations\n\nYou can only deactivate users with the SCIM API. You **cannot** permanently delete users with the API.\n\n### Rate limits\n\nFor your organization's team, Postman applies per-minute rate limits across all SCIM API endpoints. This helps ensure that you have the best experience using Postman's SCIM API. The rate limits apply as follows:\n\n*   **Write (POST, PUT, PATCH)** — 180 requests per minute.\n*   **Read (GET)** — 300 requests per minute.\n    \n\nIf your requests are limited, the API will return an HTTP `429 Too Many Requests` response status code."
		},
		{
			"name": "API Security",
			"item": [
				{
					"name": "Schema security validation",
					"id": "f68d4380-52dd-4592-a0ea-a8136f5c3987",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schema\": {\n        \"type\": \"{{schemaType}}\",\n        \"language\": \"{{schemaLanguage}}\",\n        \"schema\": \"{{schemaBody}}\"\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/security/api-validation",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"security",
								"api-validation"
							]
						},
						"description": "This endpoint will perform **static analysis** on the **Schema specification**. It will return the security misses in your schema definition and help you understand their implications and possible ways to patch the warnings. You can introduce this endpoint to your CI/CD process to automate your schema validation.\n\n**Request Body**(max size 10MB)</br>\n\n| Key | Value Type | Required | Description |\n| ---- |----| --- | ---- |\n| type | Enum(openapi3, openapi2) | Yes | Type of Schema Specification |\n| language | Enum(json, yaml) | Yes | Format of Schema Specification |\n| schema | String | Yes | Stringified Schema Body|\n\nVisit [Learning Center](https://learning.postman-beta.com/docs/api-security/security-warnings/security-warnings-overview) for more information"
					},
					"response": [
						{
							"id": "f828a095-d937-44f9-b598-259f8ded308b",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schema\": {\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"schema\": \"{\\\"openapi\\\":\\\"3.0.0\\\",\\\"info\\\":{\\\"version\\\":\\\"1\\\",\\\"title\\\":\\\"temp\\\",\\\"license\\\":{\\\"name\\\":\\\"MIT\\\"}},\\\"servers\\\":[{\\\"url\\\":\\\"https://petstore.swagger.io/v1\\\"}],\\\"paths\\\":{\\\"/user\\\":{\\\"get\\\":{\\\"summary\\\":\\\"Details about a user\\\",\\\"operationId\\\":\\\"listUser\\\",\\\"tags\\\":[\\\"user\\\"],\\\"parameters\\\":[{\\\"name\\\":\\\"id\\\",\\\"in\\\":\\\"query\\\",\\\"description\\\":\\\"ID of the user\\\",\\\"required\\\":true,\\\"schema\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int32\\\"}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"Details about a user\\\",\\\"headers\\\":{\\\"x-next\\\":{\\\"description\\\":\\\"A link to the next page of responses\\\",\\\"schema\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"content\\\":{\\\"application/json\\\":{\\\"schema\\\":{\\\"$ref\\\":\\\"#/components/schemas/User\\\"}}}},\\\"default\\\":{\\\"description\\\":\\\"unexpected error\\\",\\\"content\\\":{\\\"application/json\\\":{\\\"schema\\\":{\\\"$ref\\\":\\\"#/components/schemas/Error\\\"}}}}}}}},\\\"components\\\":{\\\"schemas\\\":{\\\"User\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"id\\\",\\\"name\\\"],\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int64\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"tag\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"Error\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"code\\\",\\\"message\\\"],\\\"properties\\\":{\\\"code\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int32\\\"},\\\"message\\\":{\\\"type\\\":\\\"string\\\"}}}},\\\"securitySchemes\\\":{\\\"BasicAuth\\\":{\\\"type\\\":\\\"http\\\",\\\"scheme\\\":\\\"basic\\\"}}},\\\"security\\\":[{\\\"BasicAuth\\\":[]}]}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/security/api-validation",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"security",
										"api-validation"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 Sep 2021 09:45:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=df3a673f51ba400d"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=5f5d0aa04106e973"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1631439948"
								},
								{
									"key": "ETag",
									"value": "W/\"164-PBgIpGM9qzmFyny6Y8Rw7l8wfv4\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"warnings\": []\n}"
						},
						{
							"id": "00b34517-549f-47b6-ae69-85586c7a8e16",
							"name": "Successful Response with Warnings",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schema\": {\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"schema\": \"{\\\"openapi\\\":\\\"3.0.0\\\",\\\"info\\\":{\\\"version\\\":\\\"1\\\",\\\"title\\\":\\\"temp\\\",\\\"license\\\":{\\\"name\\\":\\\"MIT\\\"}},\\\"servers\\\":[{\\\"url\\\":\\\"https://petstore.swagger.io/v1\\\"}],\\\"paths\\\":{\\\"/user\\\":{\\\"get\\\":{\\\"summary\\\":\\\"Details about a user\\\",\\\"operationId\\\":\\\"listUser\\\",\\\"tags\\\":[\\\"user\\\"],\\\"parameters\\\":[{\\\"name\\\":\\\"id\\\",\\\"in\\\":\\\"query\\\",\\\"description\\\":\\\"ID of the user\\\",\\\"required\\\":true,\\\"schema\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int32\\\"}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"Details about a user\\\",\\\"headers\\\":{\\\"x-next\\\":{\\\"description\\\":\\\"A link to the next page of responses\\\",\\\"schema\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"content\\\":{\\\"application/json\\\":{\\\"schema\\\":{\\\"$ref\\\":\\\"#/components/schemas/User\\\"}}}},\\\"default\\\":{\\\"description\\\":\\\"unexpected error\\\",\\\"content\\\":{\\\"application/json\\\":{\\\"schema\\\":{\\\"$ref\\\":\\\"#/components/schemas/Error\\\"}}}}}}}},\\\"components\\\":{\\\"schemas\\\":{\\\"User\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"id\\\",\\\"name\\\"],\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int64\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\"},\\\"tag\\\":{\\\"type\\\":\\\"string\\\"}}},\\\"Error\\\":{\\\"type\\\":\\\"object\\\",\\\"required\\\":[\\\"code\\\",\\\"message\\\"],\\\"properties\\\":{\\\"code\\\":{\\\"type\\\":\\\"integer\\\",\\\"format\\\":\\\"int32\\\"},\\\"message\\\":{\\\"type\\\":\\\"string\\\"}}}},\\\"securitySchemes\\\":{\\\"BasicAuth\\\":{\\\"type\\\":\\\"http\\\",\\\"scheme\\\":\\\"\\\"}}},\\\"security\\\":[{\\\"BasicAuth\\\":[]}]}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/security/api-validation",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"security",
										"api-validation"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 Sep 2021 09:44:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "15"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=ae1633478c228dbd"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=6da9fbb5ccd53a5e"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1631439948"
								},
								{
									"key": "ETag",
									"value": "W/\"f-qOnA/C9SOc9LcVJFceEQk4jhluk\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"warnings\": [\n        {\n            \"severity\": \"MEDIUM\",\n            \"message\": \"HTTP authentication scheme is using an unknown scheme.\",\n            \"location\": {\n                \"start\": {\n                    \"line\": 1,\n                    \"column\": 1116\n                },\n                \"end\": {\n                    \"line\": 1,\n                    \"column\": 1118\n                }\n            },\n            \"dataPath\": [\n                \"components\",\n                \"securitySchemes\",\n                \"BasicAuth\",\n                \"scheme\"\n            ],\n            \"possibleFixUrl\": \"https://go.pstmn.io/openapi3-security-warnings#http-authentication-scheme-is-using-an-unknown-scheme\",\n            \"category\": {\n                \"name\": \"Broken User Authentication\"\n            }\n        }\n    ]\n}"
						},
						{
							"id": "7b2826ff-615f-4546-bc23-a911adf1043d",
							"name": "Invalid Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schema\": {\n        \"type\": \"openapi1\",\n        \"language\": \"json\",\n        \"schema\": \"{}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/security/api-validation",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"security",
										"api-validation"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 Sep 2021 09:39:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "125"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=583cc629de922167"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=510c7b003e356f45"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1631439621"
								},
								{
									"key": "ETag",
									"value": "W/\"7d-N5PP6H8rafi0mv9sTvRw40PwI84\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": {\n            \"name\": \"Invalid schema\",\n            \"reason\": \"Provided schema type is not supported.\"\n        }\n    }\n}"
						}
					]
				}
			],
			"id": "0c6c8b5e-83cf-47b3-b3fc-4d3f718dcf49",
			"description": "The API Security endpoints let you manage the [security of your API](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/). API security includes ensuring you follow security and format warnings and schema validation."
		},
		{
			"name": "Audit Logs",
			"item": [
				{
					"name": "Get team audit logs",
					"id": "e4b887fa-c994-4b36-8ecc-6b7cb858f326",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/audit/logs?since={{since}}&until={{until}}&limit={{limit}}&cursor={{cursor}}&order_by={{direction}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"audit",
								"logs"
							],
							"query": [
								{
									"key": "since",
									"value": "{{since}}",
									"description": "String. Return logs created after the given time, in YYYY-MM-DD format."
								},
								{
									"key": "until",
									"value": "{{until}}",
									"description": "String. Return logs created before the given time, in YYYY-MM-DD format."
								},
								{
									"key": "limit",
									"value": "{{limit}}",
									"description": "Integer. The maximum number of audit events to return at once. The maximum value is 300."
								},
								{
									"key": "cursor",
									"value": "{{cursor}}",
									"description": "Integer. The cursor to get the next set of results."
								},
								{
									"key": "order_by",
									"value": "{{direction}}",
									"description": "String. Return the records in ascending (`ASC`) or descending (`DESC`) order. This value defaults to `DESC` order."
								}
							]
						},
						"description": "Gets a list of your team's generated audit events. For a complete list of all audit events, read our [Utilizing audit logs](https://learning.postman.com/docs/administration/audit-logs/) documentation."
					},
					"response": [
						{
							"id": "262e3928-93bd-41a3-af80-6d2648872337",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/audit/logs?since=2022-08-30&limit=2",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"audit",
										"logs"
									],
									"query": [
										{
											"key": "since",
											"value": "2022-08-30",
											"description": "String. Return logs created after the given time, in YYYY-MM-DD format."
										},
										{
											"key": "limit",
											"value": "2",
											"description": "Integer. The maximum number of audit events to return at once. The maximum value is 300."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"trails\": [\n        {\n            \"id\": 12345678,\n            \"ip\": \"192.0.2.0\",\n            \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\",\n            \"action\": \"user.login_google_success\",\n            \"timestamp\": \"2022-08-31T15:19:32.000Z\",\n            \"message\": \"Taylor Lee successfully logged in using the Google OAuth.\",\n            \"data\": {\n                \"actor\": {\n                    \"name\": \"Taylor Lee\",\n                    \"username\": \"taylor-lee\",\n                    \"email\": \"taylor.lee@example.com\",\n                    \"id\": 12345678,\n                    \"active\": true\n                },\n                \"user\": {\n                    \"name\": \"Taylor Lee\",\n                    \"username\": \"taylor-lee\",\n                    \"email\": \"taylor.lee@example.com\",\n                    \"id\": 12345678\n                },\n                \"team\": {\n                    \"name\": \"Test-Team\",\n                    \"id\": 1234\n                }\n            }\n        },\n        {\n            \"id\": 87654321,\n            \"ip\": \"192.0.2.1\",\n            \"userAgent\": \"PostmanRuntime/7.29.0 Postman/5.5.4 ChromeApp\",\n            \"action\": \"user.login_password_success\",\n            \"timestamp\": \"2022-09-01T06:30:21.000Z\",\n            \"message\": \"Alex Cruz successfully logged in using the Postman password.\",\n            \"data\": {\n                \"actor\": {\n                    \"name\": \"Alex Cruz\",\n                    \"username\": \"alex-cruz\",\n                    \"email\": \"alex.cruz@example.com\",\n                    \"id\": 87654321,\n                    \"active\": true\n                },\n                \"user\": {\n                    \"name\": \"Alex Cruz\",\n                    \"username\": \"alex-cruz\",\n                    \"email\": \"alex.cruz@example.com\",\n                    \"id\": 87654321\n                },\n                \"team\": {\n                    \"name\": \"Test-Team\",\n                    \"id\": 1234\n                }\n            }\n        }\n    ]\n}"
						},
						{
							"id": "fd8afd05-cd33-4549-9642-2d2a73227840",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/audit/logs",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"audit",
										"logs"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"AuthenticationError\",\n        \"message\": \"Invalid API Key. Every request requires a valid API Key to be sent.\"\n    }\n}"
						},
						{
							"id": "74d24bc2-6e73-4228-a251-998e2a792e66",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/audit/logs",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"audit",
										"logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"ForbiddenRequest\",\n        \"message\": \"You do not have permissions to view team Audit logs\"\n    }\n}"
						}
					]
				}
			],
			"id": "44e5c6b9-1cd4-4163-9436-eb6d2c669489",
			"description": "The [Audit Logs](https://learning.postman.com/docs/administration/audit-logs/) endpoints let you monitor and analyze your Professional or Enterprise Postman teams.\n\n**Note:**\n\nThese endpoints are **only** available to Postman **Professional** and **Enterprise** [pricing plans](https://www.postman.com/pricing)."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{postman-api-key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "209ecdee-8b9d-41a4-b1ce-2f6f02d94ee6"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "373eec11-921a-4732-bead-69a6b7fc6b6c"
			}
		}
	],
	"variable": [
		{
			"id": "62c4d97b-84cb-416f-8b61-c3fdec0c857d",
			"key": "postman-api-key",
			"value": "",
			"type": "string"
		}
	]
}